// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: links.proto

#include "links.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace speech {
namespace sparrowhawk {
class LinksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Links>
      _instance;
} _Links_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
namespace protobuf_links_2eproto {
void InitDefaultsLinksImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Links_default_instance_;
    new (ptr) ::speech::sparrowhawk::Links();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Links::InitAsDefaultInstance();
}

void InitDefaultsLinks() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLinksImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, own_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, first_child_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Links, last_child_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::speech::sparrowhawk::Links)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Links_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "links.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013links.proto\022\022speech.sparrowhawk\"S\n\005Lin"
      "ks\022\021\n\town_index\030\001 \001(\005\022\016\n\006parent\030\002 \001(\005\022\023\n"
      "\013first_child\030\003 \001(\005\022\022\n\nlast_child\030\004 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "links.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_links_2eproto
namespace speech {
namespace sparrowhawk {

// ===================================================================

void Links::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Links::kOwnIndexFieldNumber;
const int Links::kParentFieldNumber;
const int Links::kFirstChildFieldNumber;
const int Links::kLastChildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Links::Links()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_links_2eproto::InitDefaultsLinks();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Links)
}
Links::Links(const Links& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&own_index_, &from.own_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_child_) -
    reinterpret_cast<char*>(&own_index_)) + sizeof(last_child_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Links)
}

void Links::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&own_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_child_) -
      reinterpret_cast<char*>(&own_index_)) + sizeof(last_child_));
}

Links::~Links() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Links)
  SharedDtor();
}

void Links::SharedDtor() {
}

void Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Links::descriptor() {
  ::protobuf_links_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_links_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Links& Links::default_instance() {
  ::protobuf_links_2eproto::InitDefaultsLinks();
  return *internal_default_instance();
}

Links* Links::New(::google::protobuf::Arena* arena) const {
  Links* n = new Links;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Links::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&own_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_child_) -
        reinterpret_cast<char*>(&own_index_)) + sizeof(last_child_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Links)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 own_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_own_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_child = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_first_child();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_child_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_child = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_last_child();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_child_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Links)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Links)
  return false;
#undef DO_
}

void Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 own_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->own_index(), output);
  }

  // optional int32 parent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent(), output);
  }

  // optional int32 first_child = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->first_child(), output);
  }

  // optional int32 last_child = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_child(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Links)
}

::google::protobuf::uint8* Links::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Links)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 own_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->own_index(), target);
  }

  // optional int32 parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent(), target);
  }

  // optional int32 first_child = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->first_child(), target);
  }

  // optional int32 last_child = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_child(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Links)
  return target;
}

size_t Links::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Links)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 own_index = 1;
    if (has_own_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->own_index());
    }

    // optional int32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }

    // optional int32 first_child = 3;
    if (has_first_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_child());
    }

    // optional int32 last_child = 4;
    if (has_last_child()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_child());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Links::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Links)
  GOOGLE_DCHECK_NE(&from, this);
  const Links* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Links>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Links)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Links)
    MergeFrom(*source);
  }
}

void Links::MergeFrom(const Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Links)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      own_index_ = from.own_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000004u) {
      first_child_ = from.first_child_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_child_ = from.last_child_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Links::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Links::CopyFrom(const Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Links::IsInitialized() const {
  return true;
}

void Links::Swap(Links* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Links::InternalSwap(Links* other) {
  using std::swap;
  swap(own_index_, other->own_index_);
  swap(parent_, other->parent_);
  swap(first_child_, other->first_child_);
  swap(last_child_, other->last_child_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Links::GetMetadata() const {
  protobuf_links_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_links_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
