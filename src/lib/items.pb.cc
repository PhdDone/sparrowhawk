// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items.proto

#include "items.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace speech {
namespace sparrowhawk {
class TokenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Token>
      _instance;
} _Token_default_instance_;
class WordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Word>
      _instance;
} _Word_default_instance_;
class LinguisticStructureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinguisticStructure>
      _instance;
} _LinguisticStructure_default_instance_;
class UtteranceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Utterance>
      _instance;
} _Utterance_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
namespace protobuf_items_2eproto {
void InitDefaultsTokenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_links_2eproto::InitDefaultsLinks();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsCardinal();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsOrdinal();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsDecimal();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsFraction();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsTime();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsMeasure();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsDate();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsTelephone();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsMoney();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsElectronic();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsConnector();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsAbbreviation();
  {
    void* ptr = &::speech::sparrowhawk::_Token_default_instance_;
    new (ptr) ::speech::sparrowhawk::Token();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Token::InitAsDefaultInstance();
}

void InitDefaultsToken() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTokenImpl);
}

void InitDefaultsWordImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_links_2eproto::InitDefaultsLinks();
  {
    void* ptr = &::speech::sparrowhawk::_Word_default_instance_;
    new (ptr) ::speech::sparrowhawk::Word();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Word::InitAsDefaultInstance();
}

void InitDefaultsWord() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWordImpl);
}

void InitDefaultsLinguisticStructureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_items_2eproto::InitDefaultsToken();
  protobuf_items_2eproto::InitDefaultsWord();
  {
    void* ptr = &::speech::sparrowhawk::_LinguisticStructure_default_instance_;
    new (ptr) ::speech::sparrowhawk::LinguisticStructure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::LinguisticStructure::InitAsDefaultInstance();
}

void InitDefaultsLinguisticStructure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLinguisticStructureImpl);
}

void InitDefaultsUtteranceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_items_2eproto::InitDefaultsLinguisticStructure();
  {
    void* ptr = &::speech::sparrowhawk::_Utterance_default_instance_;
    new (ptr) ::speech::sparrowhawk::Utterance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Utterance::InitAsDefaultInstance();
}

void InitDefaultsUtterance() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUtteranceImpl);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, start_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, end_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, wordid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, spelling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, phrase_break_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, pause_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, pause_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, spelling_with_stress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, skip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, next_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, cardinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, ordinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, digit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, decimal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, measure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, telephone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, electronic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, verbatim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, letters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, connector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, abbreviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, first_daughter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Token, last_daughter_),
  7,
  21,
  22,
  0,
  30,
  1,
  2,
  25,
  23,
  24,
  3,
  26,
  27,
  8,
  9,
  4,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  5,
  6,
  19,
  20,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, spelling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, pause_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, precedes_pause_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Word, parent_),
  2,
  0,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, tokens_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::LinguisticStructure, words_),
  1,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, sentence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, original_sentence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, segmenter_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Utterance, linguistic_),
  4,
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 36, sizeof(::speech::sparrowhawk::Token)},
  { 67, 78, sizeof(::speech::sparrowhawk::Word)},
  { 84, 93, sizeof(::speech::sparrowhawk::LinguisticStructure)},
  { 97, 108, sizeof(::speech::sparrowhawk::Utterance)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Token_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Word_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_LinguisticStructure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Utterance_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "items.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013items.proto\022\022speech.sparrowhawk\032\013links"
      ".proto\032\026semiotic_classes.proto\"\335\t\n\005Token"
      "\022(\n\005links\030\001 \001(\0132\031.speech.sparrowhawk.Lin"
      "ks\022\023\n\013start_index\030\002 \001(\r\022\021\n\tend_index\030\003 \001"
      "(\r\022\014\n\004name\030\004 \001(\t\022,\n\004type\030\005 \001(\0162\036.speech."
      "sparrowhawk.Token.Type\022\016\n\006wordid\030\006 \001(\t\022\020"
      "\n\010spelling\030\007 \001(\t\022\024\n\014phrase_break\030\010 \001(\010\022\026"
      "\n\016pause_duration\030\t \001(\002\022G\n\014pause_length\030\n"
      " \001(\0162%.speech.sparrowhawk.Token.PauseLen"
      "gth:\nPAUSE_NONE\022\034\n\024spelling_with_stress\030"
      "\013 \001(\t\022\014\n\004skip\030\014 \001(\010\022\022\n\nnext_space\030\r \001(\010\022"
      ".\n\010cardinal\030\016 \001(\0132\034.speech.sparrowhawk.C"
      "ardinal\022,\n\007ordinal\030\017 \001(\0132\033.speech.sparro"
      "whawk.Ordinal\022\r\n\005digit\030\020 \001(\t\022,\n\007decimal\030"
      "\021 \001(\0132\033.speech.sparrowhawk.Decimal\022.\n\010fr"
      "action\030\022 \001(\0132\034.speech.sparrowhawk.Fracti"
      "on\022&\n\004time\030\023 \001(\0132\030.speech.sparrowhawk.Ti"
      "me\022,\n\007measure\030\024 \001(\0132\033.speech.sparrowhawk"
      ".Measure\022,\n\007percent\030\025 \001(\0132\033.speech.sparr"
      "owhawk.Decimal\022&\n\004date\030\026 \001(\0132\030.speech.sp"
      "arrowhawk.Date\0220\n\ttelephone\030\027 \001(\0132\035.spee"
      "ch.sparrowhawk.Telephone\022(\n\005money\030\030 \001(\0132"
      "\031.speech.sparrowhawk.Money\0222\n\nelectronic"
      "\030\031 \001(\0132\036.speech.sparrowhawk.Electronic\022\020"
      "\n\010verbatim\030\032 \001(\t\022\017\n\007letters\030\033 \001(\t\0220\n\tcon"
      "nector\030\034 \001(\0132\035.speech.sparrowhawk.Connec"
      "tor\0226\n\014abbreviation\030\035 \001(\0132 .speech.sparr"
      "owhawk.Abbreviation\022\026\n\016first_daughter\030\036 "
      "\001(\005\022\025\n\rlast_daughter\030\037 \001(\005\"M\n\004Type\022\010\n\004WO"
      "RD\020\001\022\022\n\016SEMIOTIC_CLASS\020\002\022\t\n\005PUNCT\020\003\022\034\n\030W"
      "ORD_NEEDS_VERBALIZATION\020\004\"P\n\013PauseLength"
      "\022\016\n\nPAUSE_NONE\020\000\022\017\n\013PAUSE_SHORT\020\001\022\020\n\014PAU"
      "SE_MEDIUM\020\002\022\016\n\nPAUSE_LONG\020\003*\t\010\350\007\020\200\200\200\200\002\"\227"
      "\001\n\004Word\022(\n\005links\030\001 \001(\0132\031.speech.sparrowh"
      "awk.Links\022\n\n\002id\030\002 \001(\t\022\020\n\010spelling\030\003 \001(\t\022"
      "\024\n\014pause_length\030\004 \001(\002\022\026\n\016precedes_pause\030"
      "\005 \001(\010\022\016\n\006parent\030\006 \001(\005*\t\010\350\007\020\200\200\200\200\002\"\217\001\n\023Lin"
      "guisticStructure\022\n\n\002id\030\001 \001(\003\022\r\n\005input\030\002 "
      "\001(\t\022)\n\006tokens\030\003 \003(\0132\031.speech.sparrowhawk"
      ".Token\022\'\n\005words\030\004 \003(\0132\030.speech.sparrowha"
      "wk.Word*\t\010\350\007\020\200\200\200\200\002\"\270\001\n\tUtterance\022\n\n\002id\030\001"
      " \001(\004\022\020\n\010filename\030\002 \001(\t\022\020\n\010sentence\030\003 \001(\t"
      "\022\031\n\021original_sentence\030\004 \001(\t\022\030\n\020segmenter"
      "_output\030\005 \003(\t\022;\n\nlinguistic\030\006 \001(\0132\'.spee"
      "ch.sparrowhawk.LinguisticStructure*\t\010\350\007\020"
      "\200\200\200\200\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1805);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "items.proto", &protobuf_RegisterTypes);
  ::protobuf_links_2eproto::AddDescriptors();
  ::protobuf_semiotic_5fclasses_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_items_2eproto
namespace speech {
namespace sparrowhawk {
const ::google::protobuf::EnumDescriptor* Token_Type_descriptor() {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_items_2eproto::file_level_enum_descriptors[0];
}
bool Token_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Token_Type Token::WORD;
const Token_Type Token::SEMIOTIC_CLASS;
const Token_Type Token::PUNCT;
const Token_Type Token::WORD_NEEDS_VERBALIZATION;
const Token_Type Token::Type_MIN;
const Token_Type Token::Type_MAX;
const int Token::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Token_PauseLength_descriptor() {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_items_2eproto::file_level_enum_descriptors[1];
}
bool Token_PauseLength_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Token_PauseLength Token::PAUSE_NONE;
const Token_PauseLength Token::PAUSE_SHORT;
const Token_PauseLength Token::PAUSE_MEDIUM;
const Token_PauseLength Token::PAUSE_LONG;
const Token_PauseLength Token::PauseLength_MIN;
const Token_PauseLength Token::PauseLength_MAX;
const int Token::PauseLength_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Token::InitAsDefaultInstance() {
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->links_ = const_cast< ::speech::sparrowhawk::Links*>(
      ::speech::sparrowhawk::Links::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->cardinal_ = const_cast< ::speech::sparrowhawk::Cardinal*>(
      ::speech::sparrowhawk::Cardinal::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->ordinal_ = const_cast< ::speech::sparrowhawk::Ordinal*>(
      ::speech::sparrowhawk::Ordinal::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->decimal_ = const_cast< ::speech::sparrowhawk::Decimal*>(
      ::speech::sparrowhawk::Decimal::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->fraction_ = const_cast< ::speech::sparrowhawk::Fraction*>(
      ::speech::sparrowhawk::Fraction::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->time_ = const_cast< ::speech::sparrowhawk::Time*>(
      ::speech::sparrowhawk::Time::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->measure_ = const_cast< ::speech::sparrowhawk::Measure*>(
      ::speech::sparrowhawk::Measure::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->percent_ = const_cast< ::speech::sparrowhawk::Decimal*>(
      ::speech::sparrowhawk::Decimal::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->date_ = const_cast< ::speech::sparrowhawk::Date*>(
      ::speech::sparrowhawk::Date::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->telephone_ = const_cast< ::speech::sparrowhawk::Telephone*>(
      ::speech::sparrowhawk::Telephone::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->money_ = const_cast< ::speech::sparrowhawk::Money*>(
      ::speech::sparrowhawk::Money::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->electronic_ = const_cast< ::speech::sparrowhawk::Electronic*>(
      ::speech::sparrowhawk::Electronic::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->connector_ = const_cast< ::speech::sparrowhawk::Connector*>(
      ::speech::sparrowhawk::Connector::internal_default_instance());
  ::speech::sparrowhawk::_Token_default_instance_._instance.get_mutable()->abbreviation_ = const_cast< ::speech::sparrowhawk::Abbreviation*>(
      ::speech::sparrowhawk::Abbreviation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Token::kLinksFieldNumber;
const int Token::kStartIndexFieldNumber;
const int Token::kEndIndexFieldNumber;
const int Token::kNameFieldNumber;
const int Token::kTypeFieldNumber;
const int Token::kWordidFieldNumber;
const int Token::kSpellingFieldNumber;
const int Token::kPhraseBreakFieldNumber;
const int Token::kPauseDurationFieldNumber;
const int Token::kPauseLengthFieldNumber;
const int Token::kSpellingWithStressFieldNumber;
const int Token::kSkipFieldNumber;
const int Token::kNextSpaceFieldNumber;
const int Token::kCardinalFieldNumber;
const int Token::kOrdinalFieldNumber;
const int Token::kDigitFieldNumber;
const int Token::kDecimalFieldNumber;
const int Token::kFractionFieldNumber;
const int Token::kTimeFieldNumber;
const int Token::kMeasureFieldNumber;
const int Token::kPercentFieldNumber;
const int Token::kDateFieldNumber;
const int Token::kTelephoneFieldNumber;
const int Token::kMoneyFieldNumber;
const int Token::kElectronicFieldNumber;
const int Token::kVerbatimFieldNumber;
const int Token::kLettersFieldNumber;
const int Token::kConnectorFieldNumber;
const int Token::kAbbreviationFieldNumber;
const int Token::kFirstDaughterFieldNumber;
const int Token::kLastDaughterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Token::Token()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_items_2eproto::InitDefaultsToken();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Token)
}
Token::Token(const Token& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  wordid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wordid()) {
    wordid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wordid_);
  }
  spelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spelling()) {
    spelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_);
  }
  spelling_with_stress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spelling_with_stress()) {
    spelling_with_stress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_with_stress_);
  }
  digit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_digit()) {
    digit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digit_);
  }
  verbatim_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_verbatim()) {
    verbatim_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verbatim_);
  }
  letters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_letters()) {
    letters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.letters_);
  }
  if (from.has_links()) {
    links_ = new ::speech::sparrowhawk::Links(*from.links_);
  } else {
    links_ = NULL;
  }
  if (from.has_cardinal()) {
    cardinal_ = new ::speech::sparrowhawk::Cardinal(*from.cardinal_);
  } else {
    cardinal_ = NULL;
  }
  if (from.has_ordinal()) {
    ordinal_ = new ::speech::sparrowhawk::Ordinal(*from.ordinal_);
  } else {
    ordinal_ = NULL;
  }
  if (from.has_decimal()) {
    decimal_ = new ::speech::sparrowhawk::Decimal(*from.decimal_);
  } else {
    decimal_ = NULL;
  }
  if (from.has_fraction()) {
    fraction_ = new ::speech::sparrowhawk::Fraction(*from.fraction_);
  } else {
    fraction_ = NULL;
  }
  if (from.has_time()) {
    time_ = new ::speech::sparrowhawk::Time(*from.time_);
  } else {
    time_ = NULL;
  }
  if (from.has_measure()) {
    measure_ = new ::speech::sparrowhawk::Measure(*from.measure_);
  } else {
    measure_ = NULL;
  }
  if (from.has_percent()) {
    percent_ = new ::speech::sparrowhawk::Decimal(*from.percent_);
  } else {
    percent_ = NULL;
  }
  if (from.has_date()) {
    date_ = new ::speech::sparrowhawk::Date(*from.date_);
  } else {
    date_ = NULL;
  }
  if (from.has_telephone()) {
    telephone_ = new ::speech::sparrowhawk::Telephone(*from.telephone_);
  } else {
    telephone_ = NULL;
  }
  if (from.has_money()) {
    money_ = new ::speech::sparrowhawk::Money(*from.money_);
  } else {
    money_ = NULL;
  }
  if (from.has_electronic()) {
    electronic_ = new ::speech::sparrowhawk::Electronic(*from.electronic_);
  } else {
    electronic_ = NULL;
  }
  if (from.has_connector()) {
    connector_ = new ::speech::sparrowhawk::Connector(*from.connector_);
  } else {
    connector_ = NULL;
  }
  if (from.has_abbreviation()) {
    abbreviation_ = new ::speech::sparrowhawk::Abbreviation(*from.abbreviation_);
  } else {
    abbreviation_ = NULL;
  }
  ::memcpy(&start_index_, &from.start_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Token)
}

void Token::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wordid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_with_stress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verbatim_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  letters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&links_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_daughter_) -
      reinterpret_cast<char*>(&links_)) + sizeof(last_daughter_));
  type_ = 1;
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Token)
  SharedDtor();
}

void Token::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wordid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_with_stress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verbatim_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  letters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete links_;
  if (this != internal_default_instance()) delete cardinal_;
  if (this != internal_default_instance()) delete ordinal_;
  if (this != internal_default_instance()) delete decimal_;
  if (this != internal_default_instance()) delete fraction_;
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete measure_;
  if (this != internal_default_instance()) delete percent_;
  if (this != internal_default_instance()) delete date_;
  if (this != internal_default_instance()) delete telephone_;
  if (this != internal_default_instance()) delete money_;
  if (this != internal_default_instance()) delete electronic_;
  if (this != internal_default_instance()) delete connector_;
  if (this != internal_default_instance()) delete abbreviation_;
}

void Token::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Token::descriptor() {
  ::protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Token& Token::default_instance() {
  ::protobuf_items_2eproto::InitDefaultsToken();
  return *internal_default_instance();
}

Token* Token::New(::google::protobuf::Arena* arena) const {
  Token* n = new Token;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!wordid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wordid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!spelling_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spelling_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!spelling_with_stress_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spelling_with_stress_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!digit_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*digit_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!verbatim_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*verbatim_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!letters_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*letters_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(links_ != NULL);
      links_->::speech::sparrowhawk::Links::Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(cardinal_ != NULL);
      cardinal_->::speech::sparrowhawk::Cardinal::Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ordinal_ != NULL);
      ordinal_->::speech::sparrowhawk::Ordinal::Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(decimal_ != NULL);
      decimal_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(fraction_ != NULL);
      fraction_->::speech::sparrowhawk::Fraction::Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(time_ != NULL);
      time_->::speech::sparrowhawk::Time::Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(measure_ != NULL);
      measure_->::speech::sparrowhawk::Measure::Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(percent_ != NULL);
      percent_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(date_ != NULL);
      date_->::speech::sparrowhawk::Date::Clear();
    }
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(telephone_ != NULL);
      telephone_->::speech::sparrowhawk::Telephone::Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(money_ != NULL);
      money_->::speech::sparrowhawk::Money::Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(electronic_ != NULL);
      electronic_->::speech::sparrowhawk::Electronic::Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(connector_ != NULL);
      connector_->::speech::sparrowhawk::Connector::Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(abbreviation_ != NULL);
      abbreviation_->::speech::sparrowhawk::Abbreviation::Clear();
    }
  }
  if (cached_has_bits & 14680064u) {
    ::memset(&start_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pause_duration_) -
        reinterpret_cast<char*>(&start_index_)) + sizeof(pause_duration_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&pause_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_daughter_) -
        reinterpret_cast<char*>(&pause_length_)) + sizeof(last_daughter_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Token::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Token)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_start_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_end_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Token.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::speech::sparrowhawk::Token_Type_IsValid(value)) {
            set_type(static_cast< ::speech::sparrowhawk::Token_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wordid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wordid().data(), static_cast<int>(this->wordid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.wordid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spelling = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spelling().data(), static_cast<int>(this->spelling().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.spelling");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool phrase_break = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_phrase_break();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phrase_break_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pause_duration = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_pause_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pause_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::speech::sparrowhawk::Token_PauseLength_IsValid(value)) {
            set_pause_length(static_cast< ::speech::sparrowhawk::Token_PauseLength >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spelling_with_stress = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling_with_stress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spelling_with_stress().data(), static_cast<int>(this->spelling_with_stress().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.spelling_with_stress");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_skip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool next_space = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_next_space();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &next_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Cardinal cardinal = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Ordinal ordinal = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ordinal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digit = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->digit().data(), static_cast<int>(this->digit().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.digit");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Decimal decimal = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decimal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Fraction fraction = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fraction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Time time = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Measure measure = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_measure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Decimal percent = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Date date = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Telephone telephone = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_telephone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Money money = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Electronic electronic = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_electronic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string verbatim = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verbatim()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->verbatim().data(), static_cast<int>(this->verbatim().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.verbatim");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string letters = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_letters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->letters().data(), static_cast<int>(this->letters().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Token.letters");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Connector connector = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abbreviation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 first_daughter = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_first_daughter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_daughter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_daughter = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_last_daughter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_daughter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Token)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Token)
  return false;
#undef DO_
}

void Token::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->links_, output);
  }

  // optional uint32 start_index = 2;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_index(), output);
  }

  // optional uint32 end_index = 3;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_index(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional .speech.sparrowhawk.Token.Type type = 5;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string wordid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordid().data(), static_cast<int>(this->wordid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.wordid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->wordid(), output);
  }

  // optional string spelling = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling().data(), static_cast<int>(this->spelling().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->spelling(), output);
  }

  // optional bool phrase_break = 8;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->phrase_break(), output);
  }

  // optional float pause_duration = 9;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pause_duration(), output);
  }

  // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->pause_length(), output);
  }

  // optional string spelling_with_stress = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling_with_stress().data(), static_cast<int>(this->spelling_with_stress().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling_with_stress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->spelling_with_stress(), output);
  }

  // optional bool skip = 12;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->skip(), output);
  }

  // optional bool next_space = 13;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->next_space(), output);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->cardinal_, output);
  }

  // optional .speech.sparrowhawk.Ordinal ordinal = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->ordinal_, output);
  }

  // optional string digit = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digit().data(), static_cast<int>(this->digit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.digit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->digit(), output);
  }

  // optional .speech.sparrowhawk.Decimal decimal = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->decimal_, output);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->fraction_, output);
  }

  // optional .speech.sparrowhawk.Time time = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->time_, output);
  }

  // optional .speech.sparrowhawk.Measure measure = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->measure_, output);
  }

  // optional .speech.sparrowhawk.Decimal percent = 21;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->percent_, output);
  }

  // optional .speech.sparrowhawk.Date date = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->date_, output);
  }

  // optional .speech.sparrowhawk.Telephone telephone = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->telephone_, output);
  }

  // optional .speech.sparrowhawk.Money money = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->money_, output);
  }

  // optional .speech.sparrowhawk.Electronic electronic = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->electronic_, output);
  }

  // optional string verbatim = 26;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbatim().data(), static_cast<int>(this->verbatim().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.verbatim");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->verbatim(), output);
  }

  // optional string letters = 27;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->letters().data(), static_cast<int>(this->letters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.letters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->letters(), output);
  }

  // optional .speech.sparrowhawk.Connector connector = 28;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->connector_, output);
  }

  // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->abbreviation_, output);
  }

  // optional int32 first_daughter = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->first_daughter(), output);
  }

  // optional int32 last_daughter = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->last_daughter(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Token)
}

::google::protobuf::uint8* Token::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Token)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->links_, deterministic, target);
  }

  // optional uint32 start_index = 2;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_index(), target);
  }

  // optional uint32 end_index = 3;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_index(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional .speech.sparrowhawk.Token.Type type = 5;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string wordid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wordid().data(), static_cast<int>(this->wordid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.wordid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->wordid(), target);
  }

  // optional string spelling = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling().data(), static_cast<int>(this->spelling().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->spelling(), target);
  }

  // optional bool phrase_break = 8;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->phrase_break(), target);
  }

  // optional float pause_duration = 9;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pause_duration(), target);
  }

  // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->pause_length(), target);
  }

  // optional string spelling_with_stress = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling_with_stress().data(), static_cast<int>(this->spelling_with_stress().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.spelling_with_stress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->spelling_with_stress(), target);
  }

  // optional bool skip = 12;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->skip(), target);
  }

  // optional bool next_space = 13;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->next_space(), target);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->cardinal_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Ordinal ordinal = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->ordinal_, deterministic, target);
  }

  // optional string digit = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digit().data(), static_cast<int>(this->digit().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.digit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->digit(), target);
  }

  // optional .speech.sparrowhawk.Decimal decimal = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->decimal_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->fraction_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Time time = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->time_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Measure measure = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->measure_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Decimal percent = 21;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->percent_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Date date = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->date_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Telephone telephone = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->telephone_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Money money = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->money_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Electronic electronic = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->electronic_, deterministic, target);
  }

  // optional string verbatim = 26;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->verbatim().data(), static_cast<int>(this->verbatim().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.verbatim");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->verbatim(), target);
  }

  // optional string letters = 27;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->letters().data(), static_cast<int>(this->letters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Token.letters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->letters(), target);
  }

  // optional .speech.sparrowhawk.Connector connector = 28;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->connector_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->abbreviation_, deterministic, target);
  }

  // optional int32 first_daughter = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->first_daughter(), target);
  }

  // optional int32 last_daughter = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->last_daughter(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Token)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string wordid = 6;
    if (has_wordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wordid());
    }

    // optional string spelling = 7;
    if (has_spelling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling());
    }

    // optional string spelling_with_stress = 11;
    if (has_spelling_with_stress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling_with_stress());
    }

    // optional string digit = 16;
    if (has_digit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digit());
    }

    // optional string verbatim = 26;
    if (has_verbatim()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verbatim());
    }

    // optional string letters = 27;
    if (has_letters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->letters());
    }

    // optional .speech.sparrowhawk.Links links = 1;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->links_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .speech.sparrowhawk.Cardinal cardinal = 14;
    if (has_cardinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cardinal_);
    }

    // optional .speech.sparrowhawk.Ordinal ordinal = 15;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ordinal_);
    }

    // optional .speech.sparrowhawk.Decimal decimal = 17;
    if (has_decimal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decimal_);
    }

    // optional .speech.sparrowhawk.Fraction fraction = 18;
    if (has_fraction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fraction_);
    }

    // optional .speech.sparrowhawk.Time time = 19;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->time_);
    }

    // optional .speech.sparrowhawk.Measure measure = 20;
    if (has_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->measure_);
    }

    // optional .speech.sparrowhawk.Decimal percent = 21;
    if (has_percent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->percent_);
    }

    // optional .speech.sparrowhawk.Date date = 22;
    if (has_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->date_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .speech.sparrowhawk.Telephone telephone = 23;
    if (has_telephone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->telephone_);
    }

    // optional .speech.sparrowhawk.Money money = 24;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->money_);
    }

    // optional .speech.sparrowhawk.Electronic electronic = 25;
    if (has_electronic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->electronic_);
    }

    // optional .speech.sparrowhawk.Connector connector = 28;
    if (has_connector()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->connector_);
    }

    // optional .speech.sparrowhawk.Abbreviation abbreviation = 29;
    if (has_abbreviation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->abbreviation_);
    }

    // optional uint32 start_index = 2;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 end_index = 3;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

    // optional float pause_duration = 9;
    if (has_pause_duration()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional .speech.sparrowhawk.Token.PauseLength pause_length = 10 [default = PAUSE_NONE];
    if (has_pause_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_length());
    }

    // optional bool phrase_break = 8;
    if (has_phrase_break()) {
      total_size += 1 + 1;
    }

    // optional bool skip = 12;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional bool next_space = 13;
    if (has_next_space()) {
      total_size += 1 + 1;
    }

    // optional int32 first_daughter = 30;
    if (has_first_daughter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_daughter());
    }

    // optional int32 last_daughter = 31;
    if (has_last_daughter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_daughter());
    }

    // optional .speech.sparrowhawk.Token.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Token::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Token)
  GOOGLE_DCHECK_NE(&from, this);
  const Token* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Token>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Token)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Token)
    MergeFrom(*source);
  }
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Token)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wordid();
      wordid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wordid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_spelling();
      spelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_spelling_with_stress();
      spelling_with_stress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_with_stress_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_digit();
      digit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digit_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_verbatim();
      verbatim_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verbatim_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_letters();
      letters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.letters_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from.links());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from.cardinal());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_ordinal()->::speech::sparrowhawk::Ordinal::MergeFrom(from.ordinal());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from.decimal());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from.fraction());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_time()->::speech::sparrowhawk::Time::MergeFrom(from.time());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_measure()->::speech::sparrowhawk::Measure::MergeFrom(from.measure());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_percent()->::speech::sparrowhawk::Decimal::MergeFrom(from.percent());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_date()->::speech::sparrowhawk::Date::MergeFrom(from.date());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_telephone()->::speech::sparrowhawk::Telephone::MergeFrom(from.telephone());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_money()->::speech::sparrowhawk::Money::MergeFrom(from.money());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_electronic()->::speech::sparrowhawk::Electronic::MergeFrom(from.electronic());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_connector()->::speech::sparrowhawk::Connector::MergeFrom(from.connector());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_abbreviation()->::speech::sparrowhawk::Abbreviation::MergeFrom(from.abbreviation());
    }
    if (cached_has_bits & 0x00200000u) {
      start_index_ = from.start_index_;
    }
    if (cached_has_bits & 0x00400000u) {
      end_index_ = from.end_index_;
    }
    if (cached_has_bits & 0x00800000u) {
      pause_duration_ = from.pause_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      pause_length_ = from.pause_length_;
    }
    if (cached_has_bits & 0x02000000u) {
      phrase_break_ = from.phrase_break_;
    }
    if (cached_has_bits & 0x04000000u) {
      skip_ = from.skip_;
    }
    if (cached_has_bits & 0x08000000u) {
      next_space_ = from.next_space_;
    }
    if (cached_has_bits & 0x10000000u) {
      first_daughter_ = from.first_daughter_;
    }
    if (cached_has_bits & 0x20000000u) {
      last_daughter_ = from.last_daughter_;
    }
    if (cached_has_bits & 0x40000000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Token::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (has_cardinal()) {
    if (!this->cardinal_->IsInitialized()) return false;
  }
  if (has_ordinal()) {
    if (!this->ordinal_->IsInitialized()) return false;
  }
  if (has_fraction()) {
    if (!this->fraction_->IsInitialized()) return false;
  }
  if (has_measure()) {
    if (!this->measure_->IsInitialized()) return false;
  }
  if (has_money()) {
    if (!this->money_->IsInitialized()) return false;
  }
  if (has_abbreviation()) {
    if (!this->abbreviation_->IsInitialized()) return false;
  }
  return true;
}

void Token::Swap(Token* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Token::InternalSwap(Token* other) {
  using std::swap;
  name_.Swap(&other->name_);
  wordid_.Swap(&other->wordid_);
  spelling_.Swap(&other->spelling_);
  spelling_with_stress_.Swap(&other->spelling_with_stress_);
  digit_.Swap(&other->digit_);
  verbatim_.Swap(&other->verbatim_);
  letters_.Swap(&other->letters_);
  swap(links_, other->links_);
  swap(cardinal_, other->cardinal_);
  swap(ordinal_, other->ordinal_);
  swap(decimal_, other->decimal_);
  swap(fraction_, other->fraction_);
  swap(time_, other->time_);
  swap(measure_, other->measure_);
  swap(percent_, other->percent_);
  swap(date_, other->date_);
  swap(telephone_, other->telephone_);
  swap(money_, other->money_);
  swap(electronic_, other->electronic_);
  swap(connector_, other->connector_);
  swap(abbreviation_, other->abbreviation_);
  swap(start_index_, other->start_index_);
  swap(end_index_, other->end_index_);
  swap(pause_duration_, other->pause_duration_);
  swap(pause_length_, other->pause_length_);
  swap(phrase_break_, other->phrase_break_);
  swap(skip_, other->skip_);
  swap(next_space_, other->next_space_);
  swap(first_daughter_, other->first_daughter_);
  swap(last_daughter_, other->last_daughter_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Token::GetMetadata() const {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Word::InitAsDefaultInstance() {
  ::speech::sparrowhawk::_Word_default_instance_._instance.get_mutable()->links_ = const_cast< ::speech::sparrowhawk::Links*>(
      ::speech::sparrowhawk::Links::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Word::kLinksFieldNumber;
const int Word::kIdFieldNumber;
const int Word::kSpellingFieldNumber;
const int Word::kPauseLengthFieldNumber;
const int Word::kPrecedesPauseFieldNumber;
const int Word::kParentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Word::Word()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_items_2eproto::InitDefaultsWord();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Word)
}
Word::Word(const Word& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  spelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_spelling()) {
    spelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_);
  }
  if (from.has_links()) {
    links_ = new ::speech::sparrowhawk::Links(*from.links_);
  } else {
    links_ = NULL;
  }
  ::memcpy(&pause_length_, &from.pause_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&pause_length_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Word)
}

void Word::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&links_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&links_)) + sizeof(parent_));
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Word)
  SharedDtor();
}

void Word::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spelling_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete links_;
}

void Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Word::descriptor() {
  ::protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Word& Word::default_instance() {
  ::protobuf_items_2eproto::InitDefaultsWord();
  return *internal_default_instance();
}

Word* Word::New(::google::protobuf::Arena* arena) const {
  Word* n = new Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Word::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Word)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!spelling_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*spelling_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(links_ != NULL);
      links_->::speech::sparrowhawk::Links::Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&pause_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_) -
        reinterpret_cast<char*>(&pause_length_)) + sizeof(parent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Links links = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Word.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string spelling = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spelling().data(), static_cast<int>(this->spelling().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Word.spelling");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pause_length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pause_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pause_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool precedes_pause = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_precedes_pause();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &precedes_pause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_parent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Word)
  return false;
#undef DO_
}

void Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Word)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->links_, output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string spelling = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling().data(), static_cast<int>(this->spelling().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.spelling");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->spelling(), output);
  }

  // optional float pause_length = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pause_length(), output);
  }

  // optional bool precedes_pause = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->precedes_pause(), output);
  }

  // optional int32 parent = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->parent(), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Word)
}

::google::protobuf::uint8* Word::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Word)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Links links = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->links_, deterministic, target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string spelling = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spelling().data(), static_cast<int>(this->spelling().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Word.spelling");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->spelling(), target);
  }

  // optional float pause_length = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pause_length(), target);
  }

  // optional bool precedes_pause = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->precedes_pause(), target);
  }

  // optional int32 parent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->parent(), target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Word)
  return target;
}

size_t Word::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Word)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string spelling = 3;
    if (has_spelling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spelling());
    }

    // optional .speech.sparrowhawk.Links links = 1;
    if (has_links()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->links_);
    }

    // optional float pause_length = 4;
    if (has_pause_length()) {
      total_size += 1 + 4;
    }

    // optional bool precedes_pause = 5;
    if (has_precedes_pause()) {
      total_size += 1 + 1;
    }

    // optional int32 parent = 6;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Word::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Word)
  GOOGLE_DCHECK_NE(&from, this);
  const Word* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Word>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Word)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Word)
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Word)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_spelling();
      spelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spelling_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_links()->::speech::sparrowhawk::Links::MergeFrom(from.links());
    }
    if (cached_has_bits & 0x00000008u) {
      pause_length_ = from.pause_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      precedes_pause_ = from.precedes_pause_;
    }
    if (cached_has_bits & 0x00000020u) {
      parent_ = from.parent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Word::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Word)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Word::Swap(Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Word::InternalSwap(Word* other) {
  using std::swap;
  id_.Swap(&other->id_);
  spelling_.Swap(&other->spelling_);
  swap(links_, other->links_);
  swap(pause_length_, other->pause_length_);
  swap(precedes_pause_, other->precedes_pause_);
  swap(parent_, other->parent_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Word::GetMetadata() const {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LinguisticStructure::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinguisticStructure::kIdFieldNumber;
const int LinguisticStructure::kInputFieldNumber;
const int LinguisticStructure::kTokensFieldNumber;
const int LinguisticStructure::kWordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinguisticStructure::LinguisticStructure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_items_2eproto::InitDefaultsLinguisticStructure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.LinguisticStructure)
}
LinguisticStructure::LinguisticStructure(const LinguisticStructure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tokens_(from.tokens_),
      words_(from.words_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input()) {
    input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.LinguisticStructure)
}

void LinguisticStructure::SharedCtor() {
  _cached_size_ = 0;
  input_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

LinguisticStructure::~LinguisticStructure() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.LinguisticStructure)
  SharedDtor();
}

void LinguisticStructure::SharedDtor() {
  input_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LinguisticStructure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinguisticStructure::descriptor() {
  ::protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LinguisticStructure& LinguisticStructure::default_instance() {
  ::protobuf_items_2eproto::InitDefaultsLinguisticStructure();
  return *internal_default_instance();
}

LinguisticStructure* LinguisticStructure::New(::google::protobuf::Arena* arena) const {
  LinguisticStructure* n = new LinguisticStructure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LinguisticStructure::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.LinguisticStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  tokens_.Clear();
  words_.Clear();
  if (has_input()) {
    GOOGLE_DCHECK(!input_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*input_.UnsafeRawStringPointer())->clear();
  }
  id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LinguisticStructure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.LinguisticStructure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input().data(), static_cast<int>(this->input().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.LinguisticStructure.input");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speech.sparrowhawk.Token tokens = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speech.sparrowhawk.Word words = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.LinguisticStructure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.LinguisticStructure)
  return false;
#undef DO_
}

void LinguisticStructure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.LinguisticStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string input = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), static_cast<int>(this->input().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.LinguisticStructure.input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->input(), output);
  }

  // repeated .speech.sparrowhawk.Token tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tokens(static_cast<int>(i)), output);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->words(static_cast<int>(i)), output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.LinguisticStructure)
}

::google::protobuf::uint8* LinguisticStructure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.LinguisticStructure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string input = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), static_cast<int>(this->input().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.LinguisticStructure.input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->input(), target);
  }

  // repeated .speech.sparrowhawk.Token tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tokens(static_cast<int>(i)), deterministic, target);
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->words_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->words(static_cast<int>(i)), deterministic, target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.LinguisticStructure)
  return target;
}

size_t LinguisticStructure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.LinguisticStructure)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .speech.sparrowhawk.Token tokens = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tokens(static_cast<int>(i)));
    }
  }

  // repeated .speech.sparrowhawk.Word words = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->words_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->words(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string input = 2;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinguisticStructure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.LinguisticStructure)
  GOOGLE_DCHECK_NE(&from, this);
  const LinguisticStructure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LinguisticStructure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.LinguisticStructure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.LinguisticStructure)
    MergeFrom(*source);
  }
}

void LinguisticStructure::MergeFrom(const LinguisticStructure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.LinguisticStructure)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  words_.MergeFrom(from.words_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_input();
      input_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LinguisticStructure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.LinguisticStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinguisticStructure::CopyFrom(const LinguisticStructure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.LinguisticStructure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinguisticStructure::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (!::google::protobuf::internal::AllAreInitialized(this->tokens())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->words())) return false;
  return true;
}

void LinguisticStructure::Swap(LinguisticStructure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinguisticStructure::InternalSwap(LinguisticStructure* other) {
  using std::swap;
  tokens_.InternalSwap(&other->tokens_);
  words_.InternalSwap(&other->words_);
  input_.Swap(&other->input_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata LinguisticStructure::GetMetadata() const {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Utterance::InitAsDefaultInstance() {
  ::speech::sparrowhawk::_Utterance_default_instance_._instance.get_mutable()->linguistic_ = const_cast< ::speech::sparrowhawk::LinguisticStructure*>(
      ::speech::sparrowhawk::LinguisticStructure::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Utterance::kIdFieldNumber;
const int Utterance::kFilenameFieldNumber;
const int Utterance::kSentenceFieldNumber;
const int Utterance::kOriginalSentenceFieldNumber;
const int Utterance::kSegmenterOutputFieldNumber;
const int Utterance::kLinguisticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Utterance::Utterance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_items_2eproto::InitDefaultsUtterance();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Utterance)
}
Utterance::Utterance(const Utterance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segmenter_output_(from.segmenter_output_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sentence()) {
    sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sentence_);
  }
  original_sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_original_sentence()) {
    original_sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_sentence_);
  }
  if (from.has_linguistic()) {
    linguistic_ = new ::speech::sparrowhawk::LinguisticStructure(*from.linguistic_);
  } else {
    linguistic_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Utterance)
}

void Utterance::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_sentence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&linguistic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&linguistic_)) + sizeof(id_));
}

Utterance::~Utterance() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Utterance)
  SharedDtor();
}

void Utterance::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sentence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  original_sentence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete linguistic_;
}

void Utterance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Utterance::descriptor() {
  ::protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Utterance& Utterance::default_instance() {
  ::protobuf_items_2eproto::InitDefaultsUtterance();
  return *internal_default_instance();
}

Utterance* Utterance::New(::google::protobuf::Arena* arena) const {
  Utterance* n = new Utterance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Utterance::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  segmenter_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sentence_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sentence_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!original_sentence_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*original_sentence_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linguistic_ != NULL);
      linguistic_->::speech::sparrowhawk::LinguisticStructure::Clear();
    }
  }
  id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Utterance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Utterance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Utterance.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sentence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sentence().data(), static_cast<int>(this->sentence().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Utterance.sentence");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string original_sentence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_sentence()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->original_sentence().data(), static_cast<int>(this->original_sentence().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Utterance.original_sentence");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string segmenter_output = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_segmenter_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->segmenter_output(this->segmenter_output_size() - 1).data(),
            static_cast<int>(this->segmenter_output(this->segmenter_output_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Utterance.segmenter_output");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linguistic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((8000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Utterance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Utterance)
  return false;
#undef DO_
}

void Utterance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string sentence = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), static_cast<int>(this->sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.sentence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sentence(), output);
  }

  // optional string original_sentence = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_sentence().data(), static_cast<int>(this->original_sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.original_sentence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->original_sentence(), output);
  }

  // repeated string segmenter_output = 5;
  for (int i = 0, n = this->segmenter_output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->segmenter_output(i).data(), static_cast<int>(this->segmenter_output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.segmenter_output");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->segmenter_output(i), output);
  }

  // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->linguistic_, output);
  }

  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Utterance)
}

::google::protobuf::uint8* Utterance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Utterance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional string sentence = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sentence().data(), static_cast<int>(this->sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.sentence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sentence(), target);
  }

  // optional string original_sentence = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->original_sentence().data(), static_cast<int>(this->original_sentence().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.original_sentence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->original_sentence(), target);
  }

  // repeated string segmenter_output = 5;
  for (int i = 0, n = this->segmenter_output_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->segmenter_output(i).data(), static_cast<int>(this->segmenter_output(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Utterance.segmenter_output");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->segmenter_output(i), target);
  }

  // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->linguistic_, deterministic, target);
  }

  // Extension range [1000, 536870912)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      1000, 536870912, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Utterance)
  return target;
}

size_t Utterance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Utterance)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string segmenter_output = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->segmenter_output_size());
  for (int i = 0, n = this->segmenter_output_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->segmenter_output(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string sentence = 3;
    if (has_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sentence());
    }

    // optional string original_sentence = 4;
    if (has_original_sentence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_sentence());
    }

    // optional .speech.sparrowhawk.LinguisticStructure linguistic = 6;
    if (has_linguistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linguistic_);
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Utterance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  const Utterance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Utterance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Utterance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Utterance)
    MergeFrom(*source);
  }
}

void Utterance::MergeFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Utterance)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segmenter_output_.MergeFrom(from.segmenter_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sentence();
      sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sentence_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_original_sentence();
      original_sentence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.original_sentence_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linguistic()->::speech::sparrowhawk::LinguisticStructure::MergeFrom(from.linguistic());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Utterance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utterance::CopyFrom(const Utterance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Utterance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utterance::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (has_linguistic()) {
    if (!this->linguistic_->IsInitialized()) return false;
  }
  return true;
}

void Utterance::Swap(Utterance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Utterance::InternalSwap(Utterance* other) {
  using std::swap;
  segmenter_output_.InternalSwap(&other->segmenter_output_);
  filename_.Swap(&other->filename_);
  sentence_.Swap(&other->sentence_);
  original_sentence_.Swap(&other->original_sentence_);
  swap(linguistic_, other->linguistic_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Utterance::GetMetadata() const {
  protobuf_items_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_items_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
