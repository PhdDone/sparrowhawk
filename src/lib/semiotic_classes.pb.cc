// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: semiotic_classes.proto

#include "semiotic_classes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace speech {
namespace sparrowhawk {
class CardinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cardinal>
      _instance;
} _Cardinal_default_instance_;
class OrdinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ordinal>
      _instance;
} _Ordinal_default_instance_;
class FractionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fraction>
      _instance;
} _Fraction_default_instance_;
class TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Time>
      _instance;
} _Time_default_instance_;
class DecimalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Decimal>
      _instance;
} _Decimal_default_instance_;
class MeasureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measure>
      _instance;
} _Measure_default_instance_;
class DateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Date>
      _instance;
} _Date_default_instance_;
class MoneyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Money>
      _instance;
} _Money_default_instance_;
class TelephoneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Telephone>
      _instance;
} _Telephone_default_instance_;
class ElectronicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Electronic>
      _instance;
} _Electronic_default_instance_;
class ConnectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Connector>
      _instance;
} _Connector_default_instance_;
class AbbreviationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Abbreviation>
      _instance;
} _Abbreviation_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
namespace protobuf_semiotic_5fclasses_2eproto {
void InitDefaultsCardinalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Cardinal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Cardinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Cardinal::InitAsDefaultInstance();
}

void InitDefaultsCardinal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCardinalImpl);
}

void InitDefaultsOrdinalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Ordinal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Ordinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Ordinal::InitAsDefaultInstance();
}

void InitDefaultsOrdinal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrdinalImpl);
}

void InitDefaultsFractionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Fraction_default_instance_;
    new (ptr) ::speech::sparrowhawk::Fraction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Fraction::InitAsDefaultInstance();
}

void InitDefaultsFraction() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFractionImpl);
}

void InitDefaultsTimeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Time_default_instance_;
    new (ptr) ::speech::sparrowhawk::Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Time::InitAsDefaultInstance();
}

void InitDefaultsTime() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTimeImpl);
}

void InitDefaultsDecimalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Decimal_default_instance_;
    new (ptr) ::speech::sparrowhawk::Decimal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Decimal::InitAsDefaultInstance();
}

void InitDefaultsDecimal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDecimalImpl);
}

void InitDefaultsMeasureImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsDecimal();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsFraction();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsCardinal();
  {
    void* ptr = &::speech::sparrowhawk::_Measure_default_instance_;
    new (ptr) ::speech::sparrowhawk::Measure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Measure::InitAsDefaultInstance();
}

void InitDefaultsMeasure() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMeasureImpl);
}

void InitDefaultsDateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Date_default_instance_;
    new (ptr) ::speech::sparrowhawk::Date();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Date::InitAsDefaultInstance();
}

void InitDefaultsDate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDateImpl);
}

void InitDefaultsMoneyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_semiotic_5fclasses_2eproto::InitDefaultsDecimal();
  {
    void* ptr = &::speech::sparrowhawk::_Money_default_instance_;
    new (ptr) ::speech::sparrowhawk::Money();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Money::InitAsDefaultInstance();
}

void InitDefaultsMoney() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMoneyImpl);
}

void InitDefaultsTelephoneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Telephone_default_instance_;
    new (ptr) ::speech::sparrowhawk::Telephone();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Telephone::InitAsDefaultInstance();
}

void InitDefaultsTelephone() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTelephoneImpl);
}

void InitDefaultsElectronicImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Electronic_default_instance_;
    new (ptr) ::speech::sparrowhawk::Electronic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Electronic::InitAsDefaultInstance();
}

void InitDefaultsElectronic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsElectronicImpl);
}

void InitDefaultsConnectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Connector_default_instance_;
    new (ptr) ::speech::sparrowhawk::Connector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Connector::InitAsDefaultInstance();
}

void InitDefaultsConnector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConnectorImpl);
}

void InitDefaultsAbbreviationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::speech::sparrowhawk::_Abbreviation_default_instance_;
    new (ptr) ::speech::sparrowhawk::Abbreviation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speech::sparrowhawk::Abbreviation::InitAsDefaultInstance();
}

void InitDefaultsAbbreviation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAbbreviationImpl);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, integer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Cardinal, field_order_),
  0,
  1,
  3,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, integer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Ordinal, field_order_),
  0,
  1,
  3,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, integer_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, denominator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, negative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Fraction, field_order_),
  0,
  1,
  2,
  5,
  3,
  6,
  4,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, speak_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, suffix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Time, field_order_),
  4,
  5,
  6,
  8,
  0,
  7,
  1,
  2,
  9,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, negative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, integer_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, fractional_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, exponent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Decimal, field_order_),
  6,
  0,
  1,
  2,
  3,
  8,
  4,
  7,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, decimal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, cardinal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Measure, field_order_),
  3,
  4,
  5,
  0,
  6,
  1,
  7,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, weekday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, short_year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, era_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Date, field_order_),
  0,
  1,
  2,
  3,
  8,
  4,
  9,
  5,
  6,
  10,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, quantity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, currency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Money, field_order_),
  3,
  4,
  0,
  5,
  1,
  6,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, number_part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Telephone, field_order_),
  0,
  ~0u,
  1,
  4,
  2,
  5,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, query_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, preserve_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, code_switch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Electronic, field_order_),
  0,
  1,
  2,
  3,
  9,
  4,
  5,
  6,
  7,
  10,
  8,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Connector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Connector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Connector, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Connector, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Connector, code_switch_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, morphosyntactic_features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speech::sparrowhawk::Abbreviation, code_switch_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::speech::sparrowhawk::Cardinal)},
  { 15, 25, sizeof(::speech::sparrowhawk::Ordinal)},
  { 30, 44, sizeof(::speech::sparrowhawk::Fraction)},
  { 53, 69, sizeof(::speech::sparrowhawk::Time)},
  { 80, 95, sizeof(::speech::sparrowhawk::Decimal)},
  { 105, 119, sizeof(::speech::sparrowhawk::Measure)},
  { 128, 145, sizeof(::speech::sparrowhawk::Date)},
  { 157, 170, sizeof(::speech::sparrowhawk::Money)},
  { 178, 191, sizeof(::speech::sparrowhawk::Telephone)},
  { 199, 216, sizeof(::speech::sparrowhawk::Electronic)},
  { 228, 236, sizeof(::speech::sparrowhawk::Connector)},
  { 239, 247, sizeof(::speech::sparrowhawk::Abbreviation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Cardinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Ordinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Fraction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Decimal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Measure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Date_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Money_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Telephone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Electronic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Connector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speech::sparrowhawk::_Abbreviation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "semiotic_classes.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026semiotic_classes.proto\022\022speech.sparrow"
      "hawk\"\177\n\010Cardinal\022\017\n\007integer\030\001 \002(\t\022 \n\030mor"
      "phosyntactic_features\030\002 \001(\t\022\026\n\016preserve_"
      "order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t\022\023\n\013fiel"
      "d_order\030\005 \003(\t\"~\n\007Ordinal\022\017\n\007integer\030\001 \002("
      "\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022\026\n\016p"
      "reserve_order\030\003 \001(\010\022\023\n\013code_switch\030\004 \001(\t"
      "\022\023\n\013field_order\030\005 \003(\t\"\321\001\n\010Fraction\022\024\n\014in"
      "teger_part\030\001 \001(\t\022\021\n\tnumerator\030\002 \002(\t\022\023\n\013d"
      "enominator\030\003 \002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030m"
      "orphosyntactic_features\030\005 \001(\t\022\026\n\016preserv"
      "e_order\030\006 \001(\010\022\023\n\013code_switch\030\007 \001(\t\022\020\n\010ne"
      "gative\030\010 \001(\010\022\023\n\013field_order\030\t \003(\t\"\352\001\n\004Ti"
      "me\022\r\n\005hours\030\001 \001(\005\022\017\n\007minutes\030\002 \001(\005\022\023\n\007se"
      "conds\030\003 \001(\005B\002\030\001\022\024\n\014speak_period\030\004 \001(\010\022\022\n"
      "\006suffix\030\005 \001(\tB\002\030\001\022\021\n\005style\030\006 \001(\005B\002\030\001\022\014\n\004"
      "zone\030\007 \001(\t\022 \n\030morphosyntactic_features\030\t"
      " \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_swi"
      "tch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\345\001\n\007Decim"
      "al\022\020\n\010negative\030\001 \001(\010\022\024\n\014integer_part\030\002 \001"
      "(\t\022\027\n\017fractional_part\030\003 \001(\t\022\020\n\010quantity\030"
      "\004 \001(\t\022\020\n\010exponent\030\005 \001(\t\022\021\n\005style\030\006 \001(\005B\002"
      "\030\001\022 \n\030morphosyntactic_features\030\007 \001(\t\022\026\n\016"
      "preserve_order\030\010 \001(\010\022\023\n\013code_switch\030\t \001("
      "\t\022\023\n\013field_order\030\n \003(\t\"\235\002\n\007Measure\022,\n\007de"
      "cimal\030\001 \001(\0132\033.speech.sparrowhawk.Decimal"
      "\022.\n\010fraction\030\002 \001(\0132\034.speech.sparrowhawk."
      "Fraction\022.\n\010cardinal\030\003 \001(\0132\034.speech.spar"
      "rowhawk.Cardinal\022\r\n\005units\030\004 \001(\t\022\021\n\005style"
      "\030\005 \001(\005B\002\030\001\022 \n\030morphosyntactic_features\030\006"
      " \001(\t\022\026\n\016preserve_order\030\007 \001(\010\022\023\n\013code_swi"
      "tch\030\010 \001(\t\022\023\n\013field_order\030\t \003(\t\"\357\001\n\004Date\022"
      "\017\n\007weekday\030\001 \001(\t\022\013\n\003day\030\002 \001(\t\022\r\n\005month\030\003"
      " \001(\t\022\014\n\004year\030\004 \001(\t\022\021\n\005style\030\005 \001(\005B\002\030\001\022\020\n"
      "\004text\030\006 \001(\tB\002\030\001\022\026\n\nshort_year\030\007 \001(\010B\002\030\001\022"
      "\013\n\003era\030\010 \001(\t\022 \n\030morphosyntactic_features"
      "\030\t \001(\t\022\026\n\016preserve_order\030\n \001(\010\022\023\n\013code_s"
      "witch\030\013 \001(\t\022\023\n\013field_order\030\014 \003(\t\"\317\001\n\005Mon"
      "ey\022+\n\006amount\030\001 \002(\0132\033.speech.sparrowhawk."
      "Decimal\022\020\n\010quantity\030\002 \001(\003\022\020\n\010currency\030\003 "
      "\002(\t\022\021\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntacti"
      "c_features\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010"
      "\022\023\n\013code_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003"
      "(\t\"\300\001\n\tTelephone\022\024\n\014country_code\030\001 \001(\t\022\023"
      "\n\013number_part\030\002 \003(\t\022\021\n\textension\030\003 \001(\t\022\021"
      "\n\005style\030\004 \001(\005B\002\030\001\022 \n\030morphosyntactic_fea"
      "tures\030\005 \001(\t\022\026\n\016preserve_order\030\006 \001(\010\022\023\n\013c"
      "ode_switch\030\007 \001(\t\022\023\n\013field_order\030\010 \003(\t\"\375\001"
      "\n\nElectronic\022\020\n\010protocol\030\001 \001(\t\022\020\n\010userna"
      "me\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\016\n\006domain\030\004 \001"
      "(\t\022\014\n\004port\030\005 \001(\005\022\014\n\004path\030\006 \001(\t\022\024\n\014query_"
      "string\030\007 \001(\t\022\023\n\013fragment_id\030\010 \001(\t\022 \n\030mor"
      "phosyntactic_features\030\t \001(\t\022\026\n\016preserve_"
      "order\030\n \001(\010\022\023\n\013code_switch\030\013 \001(\t\022\023\n\013fiel"
      "d_order\030\014 \003(\t\"P\n\tConnector\022\014\n\004type\030\001 \001(\t"
      "\022 \n\030morphosyntactic_features\030\002 \001(\t\022\023\n\013co"
      "de_switch\030\003 \001(\t\"S\n\014Abbreviation\022\014\n\004text\030"
      "\001 \002(\t\022 \n\030morphosyntactic_features\030\002 \001(\t\022"
      "\023\n\013code_switch\030\003 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "semiotic_classes.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_semiotic_5fclasses_2eproto
namespace speech {
namespace sparrowhawk {

// ===================================================================

void Cardinal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cardinal::kIntegerFieldNumber;
const int Cardinal::kMorphosyntacticFeaturesFieldNumber;
const int Cardinal::kPreserveOrderFieldNumber;
const int Cardinal::kCodeSwitchFieldNumber;
const int Cardinal::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cardinal::Cardinal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsCardinal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Cardinal)
}
Cardinal::Cardinal(const Cardinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  integer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_integer()) {
    integer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  preserve_order_ = from.preserve_order_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Cardinal)
}

void Cardinal::SharedCtor() {
  _cached_size_ = 0;
  integer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preserve_order_ = false;
}

Cardinal::~Cardinal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Cardinal)
  SharedDtor();
}

void Cardinal::SharedDtor() {
  integer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Cardinal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cardinal::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cardinal& Cardinal::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsCardinal();
  return *internal_default_instance();
}

Cardinal* Cardinal::New(::google::protobuf::Arena* arena) const {
  Cardinal* n = new Cardinal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cardinal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Cardinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!integer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*integer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  preserve_order_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cardinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Cardinal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string integer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->integer().data(), static_cast<int>(this->integer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Cardinal.integer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Cardinal.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Cardinal.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Cardinal.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Cardinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Cardinal)
  return false;
#undef DO_
}

void Cardinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Cardinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer().data(), static_cast<int>(this->integer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.integer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->integer(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preserve_order(), output);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code_switch(), output);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Cardinal)
}

::google::protobuf::uint8* Cardinal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Cardinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer().data(), static_cast<int>(this->integer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.integer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Cardinal.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Cardinal)
  return target;
}

size_t Cardinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Cardinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string integer = 1;
  if (has_integer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->integer());
  }
  // repeated string field_order = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 4;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional bool preserve_order = 3;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cardinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Cardinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Cardinal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cardinal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Cardinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Cardinal)
    MergeFrom(*source);
  }
}

void Cardinal::MergeFrom(const Cardinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Cardinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_integer();
      integer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000008u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Cardinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Cardinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cardinal::CopyFrom(const Cardinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Cardinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cardinal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Cardinal::Swap(Cardinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cardinal::InternalSwap(Cardinal* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  integer_.Swap(&other->integer_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cardinal::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ordinal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ordinal::kIntegerFieldNumber;
const int Ordinal::kMorphosyntacticFeaturesFieldNumber;
const int Ordinal::kPreserveOrderFieldNumber;
const int Ordinal::kCodeSwitchFieldNumber;
const int Ordinal::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ordinal::Ordinal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsOrdinal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Ordinal)
}
Ordinal::Ordinal(const Ordinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  integer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_integer()) {
    integer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  preserve_order_ = from.preserve_order_;
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Ordinal)
}

void Ordinal::SharedCtor() {
  _cached_size_ = 0;
  integer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preserve_order_ = false;
}

Ordinal::~Ordinal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Ordinal)
  SharedDtor();
}

void Ordinal::SharedDtor() {
  integer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ordinal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ordinal::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ordinal& Ordinal::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsOrdinal();
  return *internal_default_instance();
}

Ordinal* Ordinal::New(::google::protobuf::Arena* arena) const {
  Ordinal* n = new Ordinal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ordinal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Ordinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!integer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*integer_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  preserve_order_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ordinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Ordinal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string integer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->integer().data(), static_cast<int>(this->integer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Ordinal.integer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Ordinal.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Ordinal.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Ordinal.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Ordinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Ordinal)
  return false;
#undef DO_
}

void Ordinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Ordinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer().data(), static_cast<int>(this->integer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.integer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->integer(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preserve_order(), output);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code_switch(), output);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Ordinal)
}

::google::protobuf::uint8* Ordinal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Ordinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string integer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer().data(), static_cast<int>(this->integer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.integer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preserve_order(), target);
  }

  // optional string code_switch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code_switch(), target);
  }

  // repeated string field_order = 5;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Ordinal.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Ordinal)
  return target;
}

size_t Ordinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Ordinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string integer = 1;
  if (has_integer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->integer());
  }
  // repeated string field_order = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 4;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional bool preserve_order = 3;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ordinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Ordinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Ordinal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ordinal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Ordinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Ordinal)
    MergeFrom(*source);
  }
}

void Ordinal::MergeFrom(const Ordinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Ordinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_integer();
      integer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000008u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ordinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Ordinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ordinal::CopyFrom(const Ordinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Ordinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ordinal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Ordinal::Swap(Ordinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ordinal::InternalSwap(Ordinal* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  integer_.Swap(&other->integer_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ordinal::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Fraction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fraction::kIntegerPartFieldNumber;
const int Fraction::kNumeratorFieldNumber;
const int Fraction::kDenominatorFieldNumber;
const int Fraction::kStyleFieldNumber;
const int Fraction::kMorphosyntacticFeaturesFieldNumber;
const int Fraction::kPreserveOrderFieldNumber;
const int Fraction::kCodeSwitchFieldNumber;
const int Fraction::kNegativeFieldNumber;
const int Fraction::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Fraction::Fraction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsFraction();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Fraction)
}
Fraction::Fraction(const Fraction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  integer_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_integer_part()) {
    integer_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_part_);
  }
  numerator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_numerator()) {
    numerator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.numerator_);
  }
  denominator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_denominator()) {
    denominator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denominator_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&style_)) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Fraction)
}

void Fraction::SharedCtor() {
  _cached_size_ = 0;
  integer_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numerator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denominator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&style_)) + sizeof(negative_));
}

Fraction::~Fraction() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Fraction)
  SharedDtor();
}

void Fraction::SharedDtor() {
  integer_part_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  numerator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  denominator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fraction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fraction::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Fraction& Fraction::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsFraction();
  return *internal_default_instance();
}

Fraction* Fraction::New(::google::protobuf::Arena* arena) const {
  Fraction* n = new Fraction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Fraction::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Fraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!integer_part_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*integer_part_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!numerator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*numerator_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!denominator_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*denominator_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&negative_) -
        reinterpret_cast<char*>(&style_)) + sizeof(negative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Fraction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Fraction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string integer_part = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->integer_part().data(), static_cast<int>(this->integer_part().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.integer_part");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string numerator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_numerator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->numerator().data(), static_cast<int>(this->numerator().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.numerator");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string denominator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denominator()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->denominator().data(), static_cast<int>(this->denominator().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.denominator");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool negative = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_negative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Fraction.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Fraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Fraction)
  return false;
#undef DO_
}

void Fraction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Fraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string integer_part = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer_part().data(), static_cast<int>(this->integer_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.integer_part");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->integer_part(), output);
  }

  // required string numerator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numerator().data(), static_cast<int>(this->numerator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.numerator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->numerator(), output);
  }

  // required string denominator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->denominator().data(), static_cast<int>(this->denominator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.denominator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->denominator(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code_switch(), output);
  }

  // optional bool negative = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->negative(), output);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Fraction)
}

::google::protobuf::uint8* Fraction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Fraction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string integer_part = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer_part().data(), static_cast<int>(this->integer_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.integer_part");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->integer_part(), target);
  }

  // required string numerator = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->numerator().data(), static_cast<int>(this->numerator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.numerator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->numerator(), target);
  }

  // required string denominator = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->denominator().data(), static_cast<int>(this->denominator().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.denominator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->denominator(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // optional bool negative = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->negative(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Fraction.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Fraction)
  return target;
}

size_t Fraction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:speech.sparrowhawk.Fraction)
  size_t total_size = 0;

  if (has_numerator()) {
    // required string numerator = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->numerator());
  }

  if (has_denominator()) {
    // required string denominator = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denominator());
  }

  return total_size;
}
size_t Fraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Fraction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required string numerator = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->numerator());

    // required string denominator = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->denominator());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string field_order = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  // optional string integer_part = 1;
  if (has_integer_part()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->integer_part());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

    // optional bool negative = 8;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fraction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Fraction)
  GOOGLE_DCHECK_NE(&from, this);
  const Fraction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fraction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Fraction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Fraction)
    MergeFrom(*source);
  }
}

void Fraction::MergeFrom(const Fraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Fraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_integer_part();
      integer_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_part_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_numerator();
      numerator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.numerator_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_denominator();
      denominator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denominator_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000020u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000040u) {
      preserve_order_ = from.preserve_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      negative_ = from.negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Fraction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Fraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fraction::CopyFrom(const Fraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Fraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fraction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void Fraction::Swap(Fraction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Fraction::InternalSwap(Fraction* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  integer_part_.Swap(&other->integer_part_);
  numerator_.Swap(&other->numerator_);
  denominator_.Swap(&other->denominator_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(style_, other->style_);
  swap(preserve_order_, other->preserve_order_);
  swap(negative_, other->negative_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Fraction::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Time::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Time::kHoursFieldNumber;
const int Time::kMinutesFieldNumber;
const int Time::kSecondsFieldNumber;
const int Time::kSpeakPeriodFieldNumber;
const int Time::kSuffixFieldNumber;
const int Time::kStyleFieldNumber;
const int Time::kZoneFieldNumber;
const int Time::kMorphosyntacticFeaturesFieldNumber;
const int Time::kPreserveOrderFieldNumber;
const int Time::kCodeSwitchFieldNumber;
const int Time::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Time::Time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsTime();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Time)
}
Time::Time(const Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suffix()) {
    suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_zone()) {
    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&hours_, &from.hours_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&hours_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Time)
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  suffix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hours_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&hours_)) + sizeof(preserve_order_));
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Time)
  SharedDtor();
}

void Time::SharedDtor() {
  suffix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Time& Time::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsTime();
  return *internal_default_instance();
}

Time* Time::New(::google::protobuf::Arena* arena) const {
  Time* n = new Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!suffix_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*suffix_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!zone_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*zone_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&hours_)) + sizeof(style_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&speak_period_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&speak_period_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hours = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool speak_period = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_speak_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speak_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suffix = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffix().data(), static_cast<int>(this->suffix().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Time.suffix");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string zone = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->zone().data(), static_cast<int>(this->zone().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Time.zone");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Time.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Time.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Time.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Time)
  return false;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hours = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hours(), output);
  }

  // optional int32 minutes = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minutes(), output);
  }

  // optional int32 seconds = 3 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seconds(), output);
  }

  // optional bool speak_period = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->speak_period(), output);
  }

  // optional string suffix = 5 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.suffix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->suffix(), output);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->style(), output);
  }

  // optional string zone = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->zone(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Time)
}

::google::protobuf::uint8* Time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hours = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hours(), target);
  }

  // optional int32 minutes = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minutes(), target);
  }

  // optional int32 seconds = 3 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seconds(), target);
  }

  // optional bool speak_period = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->speak_period(), target);
  }

  // optional string suffix = 5 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.suffix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->suffix(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->style(), target);
  }

  // optional string zone = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->zone().data(), static_cast<int>(this->zone().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zone(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Time.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string field_order = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string suffix = 5 [deprecated = true];
    if (has_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffix());
    }

    // optional string zone = 7;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }

    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional int32 hours = 1;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 2;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 3 [deprecated = true];
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional int32 style = 6 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool speak_period = 4;
    if (has_speak_period()) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const Time* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Time)
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_suffix();
      suffix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suffix_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_zone();
      zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000010u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000020u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      speak_period_ = from.speak_period_;
    }
    if (cached_has_bits & 0x00000200u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::Swap(Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Time::InternalSwap(Time* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  suffix_.Swap(&other->suffix_);
  zone_.Swap(&other->zone_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(style_, other->style_);
  swap(speak_period_, other->speak_period_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Decimal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decimal::kNegativeFieldNumber;
const int Decimal::kIntegerPartFieldNumber;
const int Decimal::kFractionalPartFieldNumber;
const int Decimal::kQuantityFieldNumber;
const int Decimal::kExponentFieldNumber;
const int Decimal::kStyleFieldNumber;
const int Decimal::kMorphosyntacticFeaturesFieldNumber;
const int Decimal::kPreserveOrderFieldNumber;
const int Decimal::kCodeSwitchFieldNumber;
const int Decimal::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decimal::Decimal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsDecimal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Decimal)
}
Decimal::Decimal(const Decimal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  integer_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_integer_part()) {
    integer_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_part_);
  }
  fractional_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fractional_part()) {
    fractional_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fractional_part_);
  }
  quantity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_quantity()) {
    quantity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quantity_);
  }
  exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exponent()) {
    exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exponent_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&negative_, &from.negative_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&negative_)) + sizeof(style_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Decimal)
}

void Decimal::SharedCtor() {
  _cached_size_ = 0;
  integer_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fractional_part_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&negative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&style_) -
      reinterpret_cast<char*>(&negative_)) + sizeof(style_));
}

Decimal::~Decimal() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Decimal)
  SharedDtor();
}

void Decimal::SharedDtor() {
  integer_part_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fractional_part_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quantity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Decimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Decimal::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Decimal& Decimal::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsDecimal();
  return *internal_default_instance();
}

Decimal* Decimal::New(::google::protobuf::Arena* arena) const {
  Decimal* n = new Decimal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!integer_part_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*integer_part_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!fractional_part_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fractional_part_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!quantity_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*quantity_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!exponent_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*exponent_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&negative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&negative_)) + sizeof(preserve_order_));
  }
  style_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Decimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Decimal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool negative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_negative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string integer_part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_integer_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->integer_part().data(), static_cast<int>(this->integer_part().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.integer_part");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fractional_part = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fractional_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fractional_part().data(), static_cast<int>(this->fractional_part().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.fractional_part");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quantity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quantity().data(), static_cast<int>(this->quantity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.quantity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string exponent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exponent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exponent().data(), static_cast<int>(this->exponent().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.exponent");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Decimal.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Decimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Decimal)
  return false;
#undef DO_
}

void Decimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->negative(), output);
  }

  // optional string integer_part = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer_part().data(), static_cast<int>(this->integer_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.integer_part");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->integer_part(), output);
  }

  // optional string fractional_part = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fractional_part().data(), static_cast<int>(this->fractional_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.fractional_part");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fractional_part(), output);
  }

  // optional string quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), static_cast<int>(this->quantity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.quantity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->quantity(), output);
  }

  // optional string exponent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exponent().data(), static_cast<int>(this->exponent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.exponent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exponent(), output);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->style(), output);
  }

  // optional string morphosyntactic_features = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->preserve_order(), output);
  }

  // optional string code_switch = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->code_switch(), output);
  }

  // repeated string field_order = 10;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Decimal)
}

::google::protobuf::uint8* Decimal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool negative = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->negative(), target);
  }

  // optional string integer_part = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->integer_part().data(), static_cast<int>(this->integer_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.integer_part");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->integer_part(), target);
  }

  // optional string fractional_part = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fractional_part().data(), static_cast<int>(this->fractional_part().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.fractional_part");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fractional_part(), target);
  }

  // optional string quantity = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quantity().data(), static_cast<int>(this->quantity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.quantity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quantity(), target);
  }

  // optional string exponent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exponent().data(), static_cast<int>(this->exponent().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.exponent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exponent(), target);
  }

  // optional int32 style = 6 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->style(), target);
  }

  // optional string morphosyntactic_features = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->preserve_order(), target);
  }

  // optional string code_switch = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->code_switch(), target);
  }

  // repeated string field_order = 10;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Decimal.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Decimal)
  return target;
}

size_t Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Decimal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string field_order = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string integer_part = 2;
    if (has_integer_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->integer_part());
    }

    // optional string fractional_part = 3;
    if (has_fractional_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fractional_part());
    }

    // optional string quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quantity());
    }

    // optional string exponent = 5;
    if (has_exponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exponent());
    }

    // optional string morphosyntactic_features = 7;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 9;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional bool negative = 1;
    if (has_negative()) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 8;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  // optional int32 style = 6 [deprecated = true];
  if (has_style()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->style());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Decimal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const Decimal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Decimal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Decimal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Decimal)
    MergeFrom(*source);
  }
}

void Decimal::MergeFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_integer_part();
      integer_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.integer_part_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fractional_part();
      fractional_part_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fractional_part_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_quantity();
      quantity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quantity_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_exponent();
      exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exponent_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000040u) {
      negative_ = from.negative_;
    }
    if (cached_has_bits & 0x00000080u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_style(from.style());
  }
}

void Decimal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decimal::CopyFrom(const Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decimal::IsInitialized() const {
  return true;
}

void Decimal::Swap(Decimal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decimal::InternalSwap(Decimal* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  integer_part_.Swap(&other->integer_part_);
  fractional_part_.Swap(&other->fractional_part_);
  quantity_.Swap(&other->quantity_);
  exponent_.Swap(&other->exponent_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(negative_, other->negative_);
  swap(preserve_order_, other->preserve_order_);
  swap(style_, other->style_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Decimal::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Measure::InitAsDefaultInstance() {
  ::speech::sparrowhawk::_Measure_default_instance_._instance.get_mutable()->decimal_ = const_cast< ::speech::sparrowhawk::Decimal*>(
      ::speech::sparrowhawk::Decimal::internal_default_instance());
  ::speech::sparrowhawk::_Measure_default_instance_._instance.get_mutable()->fraction_ = const_cast< ::speech::sparrowhawk::Fraction*>(
      ::speech::sparrowhawk::Fraction::internal_default_instance());
  ::speech::sparrowhawk::_Measure_default_instance_._instance.get_mutable()->cardinal_ = const_cast< ::speech::sparrowhawk::Cardinal*>(
      ::speech::sparrowhawk::Cardinal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measure::kDecimalFieldNumber;
const int Measure::kFractionFieldNumber;
const int Measure::kCardinalFieldNumber;
const int Measure::kUnitsFieldNumber;
const int Measure::kStyleFieldNumber;
const int Measure::kMorphosyntacticFeaturesFieldNumber;
const int Measure::kPreserveOrderFieldNumber;
const int Measure::kCodeSwitchFieldNumber;
const int Measure::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measure::Measure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsMeasure();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Measure)
}
Measure::Measure(const Measure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_units()) {
    units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  if (from.has_decimal()) {
    decimal_ = new ::speech::sparrowhawk::Decimal(*from.decimal_);
  } else {
    decimal_ = NULL;
  }
  if (from.has_fraction()) {
    fraction_ = new ::speech::sparrowhawk::Fraction(*from.fraction_);
  } else {
    fraction_ = NULL;
  }
  if (from.has_cardinal()) {
    cardinal_ = new ::speech::sparrowhawk::Cardinal(*from.cardinal_);
  } else {
    cardinal_ = NULL;
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Measure)
}

void Measure::SharedCtor() {
  _cached_size_ = 0;
  units_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&decimal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&decimal_)) + sizeof(preserve_order_));
}

Measure::~Measure() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Measure)
  SharedDtor();
}

void Measure::SharedDtor() {
  units_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decimal_;
  if (this != internal_default_instance()) delete fraction_;
  if (this != internal_default_instance()) delete cardinal_;
}

void Measure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Measure::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measure& Measure::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsMeasure();
  return *internal_default_instance();
}

Measure* Measure::New(::google::protobuf::Arena* arena) const {
  Measure* n = new Measure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Measure::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!units_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*units_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(decimal_ != NULL);
      decimal_->::speech::sparrowhawk::Decimal::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(fraction_ != NULL);
      fraction_->::speech::sparrowhawk::Fraction::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cardinal_ != NULL);
      cardinal_->::speech::sparrowhawk::Cardinal::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Measure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Measure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .speech.sparrowhawk.Decimal decimal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_decimal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Fraction fraction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fraction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .speech.sparrowhawk.Cardinal cardinal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardinal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string units = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->units().data(), static_cast<int>(this->units().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Measure.units");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Measure.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Measure.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Measure.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Measure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Measure)
  return false;
#undef DO_
}

void Measure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Decimal decimal = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->decimal_, output);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fraction_, output);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cardinal_, output);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.units");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->units(), output);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->style(), output);
  }

  // optional string morphosyntactic_features = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->preserve_order(), output);
  }

  // optional string code_switch = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->code_switch(), output);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Measure)
}

::google::protobuf::uint8* Measure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Measure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .speech.sparrowhawk.Decimal decimal = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->decimal_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Fraction fraction = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fraction_, deterministic, target);
  }

  // optional .speech.sparrowhawk.Cardinal cardinal = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->cardinal_, deterministic, target);
  }

  // optional string units = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->units().data(), static_cast<int>(this->units().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.units");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->units(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->style(), target);
  }

  // optional string morphosyntactic_features = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->preserve_order(), target);
  }

  // optional string code_switch = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->code_switch(), target);
  }

  // repeated string field_order = 9;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Measure.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Measure)
  return target;
}

size_t Measure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Measure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string field_order = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string units = 4;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional string morphosyntactic_features = 6;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 8;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional .speech.sparrowhawk.Decimal decimal = 1;
    if (has_decimal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->decimal_);
    }

    // optional .speech.sparrowhawk.Fraction fraction = 2;
    if (has_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fraction_);
    }

    // optional .speech.sparrowhawk.Cardinal cardinal = 3;
    if (has_cardinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cardinal_);
    }

    // optional int32 style = 5 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional bool preserve_order = 7;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Measure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  const Measure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Measure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Measure)
    MergeFrom(*source);
  }
}

void Measure::MergeFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Measure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_units();
      units_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.units_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_decimal()->::speech::sparrowhawk::Decimal::MergeFrom(from.decimal());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_fraction()->::speech::sparrowhawk::Fraction::MergeFrom(from.fraction());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cardinal()->::speech::sparrowhawk::Cardinal::MergeFrom(from.cardinal());
    }
    if (cached_has_bits & 0x00000040u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000080u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Measure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measure::CopyFrom(const Measure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Measure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measure::IsInitialized() const {
  if (has_fraction()) {
    if (!this->fraction_->IsInitialized()) return false;
  }
  if (has_cardinal()) {
    if (!this->cardinal_->IsInitialized()) return false;
  }
  return true;
}

void Measure::Swap(Measure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measure::InternalSwap(Measure* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  units_.Swap(&other->units_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(decimal_, other->decimal_);
  swap(fraction_, other->fraction_);
  swap(cardinal_, other->cardinal_);
  swap(style_, other->style_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Measure::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Date::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Date::kWeekdayFieldNumber;
const int Date::kDayFieldNumber;
const int Date::kMonthFieldNumber;
const int Date::kYearFieldNumber;
const int Date::kStyleFieldNumber;
const int Date::kTextFieldNumber;
const int Date::kShortYearFieldNumber;
const int Date::kEraFieldNumber;
const int Date::kMorphosyntacticFeaturesFieldNumber;
const int Date::kPreserveOrderFieldNumber;
const int Date::kCodeSwitchFieldNumber;
const int Date::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Date::Date()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsDate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Date)
}
Date::Date(const Date& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weekday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_weekday()) {
    weekday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weekday_);
  }
  day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_day()) {
    day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_);
  }
  month_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_month()) {
    month_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.month_);
  }
  year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_year()) {
    year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  era_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_era()) {
    era_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.era_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Date)
}

void Date::SharedCtor() {
  _cached_size_ = 0;
  weekday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  month_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  era_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Date)
  SharedDtor();
}

void Date::SharedDtor() {
  weekday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  month_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  year_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  era_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Date::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Date::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Date& Date::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsDate();
  return *internal_default_instance();
}

Date* Date::New(::google::protobuf::Arena* arena) const {
  Date* n = new Date;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!weekday_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*weekday_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!day_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*day_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!month_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*month_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!year_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*year_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!era_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*era_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 1792u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Date)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string weekday = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weekday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weekday().data(), static_cast<int>(this->weekday().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.weekday");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_day()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->day().data(), static_cast<int>(this->day().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.day");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string month = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_month()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->month().data(), static_cast<int>(this->month().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.month");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->year().data(), static_cast<int>(this->year().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.year");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool short_year = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_short_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &short_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string era = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_era()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->era().data(), static_cast<int>(this->era().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.era");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Date.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Date)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Date)
  return false;
#undef DO_
}

void Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string weekday = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weekday().data(), static_cast<int>(this->weekday().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.weekday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->weekday(), output);
  }

  // optional string day = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), static_cast<int>(this->day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.day");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->day(), output);
  }

  // optional string month = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->month().data(), static_cast<int>(this->month().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.month");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->month(), output);
  }

  // optional string year = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year().data(), static_cast<int>(this->year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.year");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->year(), output);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->style(), output);
  }

  // optional string text = 6 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  // optional bool short_year = 7 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->short_year(), output);
  }

  // optional string era = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->era().data(), static_cast<int>(this->era().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.era");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->era(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Date)
}

::google::protobuf::uint8* Date::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string weekday = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weekday().data(), static_cast<int>(this->weekday().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.weekday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->weekday(), target);
  }

  // optional string day = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->day().data(), static_cast<int>(this->day().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.day");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->day(), target);
  }

  // optional string month = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->month().data(), static_cast<int>(this->month().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.month");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->month(), target);
  }

  // optional string year = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->year().data(), static_cast<int>(this->year().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.year");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->year(), target);
  }

  // optional int32 style = 5 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->style(), target);
  }

  // optional string text = 6 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional bool short_year = 7 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->short_year(), target);
  }

  // optional string era = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->era().data(), static_cast<int>(this->era().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.era");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->era(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Date.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Date)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string field_order = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string weekday = 1;
    if (has_weekday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weekday());
    }

    // optional string day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->day());
    }

    // optional string month = 3;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->month());
    }

    // optional string year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }

    // optional string text = 6 [deprecated = true];
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string era = 8;
    if (has_era()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->era());
    }

    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 style = 5 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional bool short_year = 7 [deprecated = true];
    if (has_short_year()) {
      total_size += 1 + 1;
    }

    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Date::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Date>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Date)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_weekday();
      weekday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.weekday_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_day();
      day_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.day_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_month();
      month_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.month_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_year();
      year_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.year_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_era();
      era_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.era_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000200u) {
      short_year_ = from.short_year_;
    }
    if (cached_has_bits & 0x00000400u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::Swap(Date* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Date::InternalSwap(Date* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  weekday_.Swap(&other->weekday_);
  day_.Swap(&other->day_);
  month_.Swap(&other->month_);
  year_.Swap(&other->year_);
  text_.Swap(&other->text_);
  era_.Swap(&other->era_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(style_, other->style_);
  swap(short_year_, other->short_year_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Date::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Money::InitAsDefaultInstance() {
  ::speech::sparrowhawk::_Money_default_instance_._instance.get_mutable()->amount_ = const_cast< ::speech::sparrowhawk::Decimal*>(
      ::speech::sparrowhawk::Decimal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Money::kAmountFieldNumber;
const int Money::kQuantityFieldNumber;
const int Money::kCurrencyFieldNumber;
const int Money::kStyleFieldNumber;
const int Money::kMorphosyntacticFeaturesFieldNumber;
const int Money::kPreserveOrderFieldNumber;
const int Money::kCodeSwitchFieldNumber;
const int Money::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Money::Money()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsMoney();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Money)
}
Money::Money(const Money& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_currency()) {
    currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  if (from.has_amount()) {
    amount_ = new ::speech::sparrowhawk::Decimal(*from.amount_);
  } else {
    amount_ = NULL;
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Money)
}

void Money::SharedCtor() {
  _cached_size_ = 0;
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(preserve_order_));
}

Money::~Money() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Money)
  SharedDtor();
}

void Money::SharedDtor() {
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void Money::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Money::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Money& Money::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsMoney();
  return *internal_default_instance();
}

Money* Money::New(::google::protobuf::Arena* arena) const {
  Money* n = new Money;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Money::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Money)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!currency_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*currency_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(amount_ != NULL);
      amount_->::speech::sparrowhawk::Decimal::Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&quantity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&quantity_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Money::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Money)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .speech.sparrowhawk.Decimal amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), static_cast<int>(this->currency().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Money.currency");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Money.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Money.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Money.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Money)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Money)
  return false;
#undef DO_
}

void Money::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Money)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .speech.sparrowhawk.Decimal amount = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->amount_, output);
  }

  // optional int64 quantity = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->quantity(), output);
  }

  // required string currency = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code_switch(), output);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Money)
}

::google::protobuf::uint8* Money::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Money)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .speech.sparrowhawk.Decimal amount = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->amount_, deterministic, target);
  }

  // optional int64 quantity = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->quantity(), target);
  }

  // required string currency = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Money.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Money)
  return target;
}

size_t Money::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:speech.sparrowhawk.Money)
  size_t total_size = 0;

  if (has_currency()) {
    // required string currency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_amount()) {
    // required .speech.sparrowhawk.Decimal amount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->amount_);
  }

  return total_size;
}
size_t Money::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Money)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string currency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required .speech.sparrowhawk.Decimal amount = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->amount_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string field_order = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  if (_has_bits_[0 / 32] & 112u) {
    // optional int64 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Money::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Money)
  GOOGLE_DCHECK_NE(&from, this);
  const Money* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Money>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Money)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Money)
    MergeFrom(*source);
  }
}

void Money::MergeFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Money)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_amount()->::speech::sparrowhawk::Decimal::MergeFrom(from.amount());
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000040u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Money::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Money::CopyFrom(const Money& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Money)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Money::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void Money::Swap(Money* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Money::InternalSwap(Money* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  currency_.Swap(&other->currency_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(amount_, other->amount_);
  swap(quantity_, other->quantity_);
  swap(style_, other->style_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Money::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Telephone::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Telephone::kCountryCodeFieldNumber;
const int Telephone::kNumberPartFieldNumber;
const int Telephone::kExtensionFieldNumber;
const int Telephone::kStyleFieldNumber;
const int Telephone::kMorphosyntacticFeaturesFieldNumber;
const int Telephone::kPreserveOrderFieldNumber;
const int Telephone::kCodeSwitchFieldNumber;
const int Telephone::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Telephone::Telephone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsTelephone();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Telephone)
}
Telephone::Telephone(const Telephone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      number_part_(from.number_part_),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension()) {
    extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&style_, &from.style_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Telephone)
}

void Telephone::SharedCtor() {
  _cached_size_ = 0;
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&style_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
}

Telephone::~Telephone() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Telephone)
  SharedDtor();
}

void Telephone::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Telephone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Telephone::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Telephone& Telephone::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsTelephone();
  return *internal_default_instance();
}

Telephone* Telephone::New(::google::protobuf::Arena* arena) const {
  Telephone* n = new Telephone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Telephone::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Telephone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_part_.Clear();
  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*extension_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&style_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Telephone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Telephone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), static_cast<int>(this->country_code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string number_part = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_number_part()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number_part(this->number_part_size() - 1).data(),
            static_cast<int>(this->number_part(this->number_part_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.number_part");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extension().data(), static_cast<int>(this->extension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.extension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 style = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_style();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Telephone.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Telephone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Telephone)
  return false;
#undef DO_
}

void Telephone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Telephone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country_code(), output);
  }

  // repeated string number_part = 2;
  for (int i = 0, n = this->number_part_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number_part(i).data(), static_cast<int>(this->number_part(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.number_part");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number_part(i), output);
  }

  // optional string extension = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), static_cast<int>(this->extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extension(), output);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style(), output);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->preserve_order(), output);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code_switch(), output);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Telephone)
}

::google::protobuf::uint8* Telephone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Telephone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), static_cast<int>(this->country_code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // repeated string number_part = 2;
  for (int i = 0, n = this->number_part_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number_part(i).data(), static_cast<int>(this->number_part(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.number_part");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->number_part(i), target);
  }

  // optional string extension = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extension().data(), static_cast<int>(this->extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extension(), target);
  }

  // optional int32 style = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style(), target);
  }

  // optional string morphosyntactic_features = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->preserve_order(), target);
  }

  // optional string code_switch = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code_switch(), target);
  }

  // repeated string field_order = 8;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Telephone.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Telephone)
  return target;
}

size_t Telephone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Telephone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string number_part = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->number_part_size());
  for (int i = 0, n = this->number_part_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->number_part(i));
  }

  // repeated string field_order = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string country_code = 1;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string extension = 3;
    if (has_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extension());
    }

    // optional string morphosyntactic_features = 5;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 7;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional int32 style = 4 [deprecated = true];
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style());
    }

    // optional bool preserve_order = 6;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Telephone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Telephone)
  GOOGLE_DCHECK_NE(&from, this);
  const Telephone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Telephone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Telephone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Telephone)
    MergeFrom(*source);
  }
}

void Telephone::MergeFrom(const Telephone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Telephone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_part_.MergeFrom(from.number_part_);
  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_extension();
      extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extension_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000010u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000020u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Telephone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Telephone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Telephone::CopyFrom(const Telephone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Telephone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Telephone::IsInitialized() const {
  return true;
}

void Telephone::Swap(Telephone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Telephone::InternalSwap(Telephone* other) {
  using std::swap;
  number_part_.InternalSwap(&other->number_part_);
  field_order_.InternalSwap(&other->field_order_);
  country_code_.Swap(&other->country_code_);
  extension_.Swap(&other->extension_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(style_, other->style_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Telephone::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Electronic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Electronic::kProtocolFieldNumber;
const int Electronic::kUsernameFieldNumber;
const int Electronic::kPasswordFieldNumber;
const int Electronic::kDomainFieldNumber;
const int Electronic::kPortFieldNumber;
const int Electronic::kPathFieldNumber;
const int Electronic::kQueryStringFieldNumber;
const int Electronic::kFragmentIdFieldNumber;
const int Electronic::kMorphosyntacticFeaturesFieldNumber;
const int Electronic::kPreserveOrderFieldNumber;
const int Electronic::kCodeSwitchFieldNumber;
const int Electronic::kFieldOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Electronic::Electronic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsElectronic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Electronic)
}
Electronic::Electronic(const Electronic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      field_order_(from.field_order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_string()) {
    query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  fragment_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fragment_id()) {
    fragment_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_id_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_order_) -
    reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Electronic)
}

void Electronic::SharedCtor() {
  _cached_size_ = 0;
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preserve_order_) -
      reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
}

Electronic::~Electronic() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Electronic)
  SharedDtor();
}

void Electronic::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Electronic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Electronic::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Electronic& Electronic::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsElectronic();
  return *internal_default_instance();
}

Electronic* Electronic::New(::google::protobuf::Arena* arena) const {
  Electronic* n = new Electronic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Electronic::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Electronic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_order_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!protocol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*protocol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!query_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(!fragment_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fragment_id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*code_switch_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 1536u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preserve_order_) -
        reinterpret_cast<char*>(&port_)) + sizeof(preserve_order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Electronic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Electronic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string protocol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.protocol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string domain = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_string().data(), static_cast<int>(this->query_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.query_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fragment_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fragment_id().data(), static_cast<int>(this->fragment_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.fragment_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preserve_order = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_preserve_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preserve_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field_order = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field_order(this->field_order_size() - 1).data(),
            static_cast<int>(this->field_order(this->field_order_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Electronic.field_order");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Electronic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Electronic)
  return false;
#undef DO_
}

void Electronic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Electronic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->protocol(), output);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->domain(), output);
  }

  // optional int32 port = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional string path = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->path(), output);
  }

  // optional string query_string = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.query_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->query_string(), output);
  }

  // optional string fragment_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fragment_id().data(), static_cast<int>(this->fragment_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.fragment_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fragment_id(), output);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->morphosyntactic_features(), output);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->preserve_order(), output);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->code_switch(), output);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.field_order");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->field_order(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Electronic)
}

::google::protobuf::uint8* Electronic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Electronic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string protocol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->protocol(), target);
  }

  // optional string username = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string domain = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->domain(), target);
  }

  // optional int32 port = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional string path = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path(), target);
  }

  // optional string query_string = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), static_cast<int>(this->query_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.query_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->query_string(), target);
  }

  // optional string fragment_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fragment_id().data(), static_cast<int>(this->fragment_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.fragment_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fragment_id(), target);
  }

  // optional string morphosyntactic_features = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->morphosyntactic_features(), target);
  }

  // optional bool preserve_order = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->preserve_order(), target);
  }

  // optional string code_switch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->code_switch(), target);
  }

  // repeated string field_order = 12;
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field_order(i).data(), static_cast<int>(this->field_order(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Electronic.field_order");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->field_order(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Electronic)
  return target;
}

size_t Electronic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Electronic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string field_order = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_order_size());
  for (int i = 0, n = this->field_order_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field_order(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional string path = 6;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string query_string = 7;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }

    // optional string fragment_id = 8;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fragment_id());
    }

    // optional string morphosyntactic_features = 9;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional string code_switch = 11;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional bool preserve_order = 10;
    if (has_preserve_order()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Electronic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Electronic)
  GOOGLE_DCHECK_NE(&from, this);
  const Electronic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Electronic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Electronic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Electronic)
    MergeFrom(*source);
  }
}

void Electronic::MergeFrom(const Electronic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Electronic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_order_.MergeFrom(from.field_order_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_query_string();
      query_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_string_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_fragment_id();
      fragment_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_id_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
    if (cached_has_bits & 0x00000200u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000400u) {
      preserve_order_ = from.preserve_order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Electronic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Electronic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electronic::CopyFrom(const Electronic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Electronic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electronic::IsInitialized() const {
  return true;
}

void Electronic::Swap(Electronic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Electronic::InternalSwap(Electronic* other) {
  using std::swap;
  field_order_.InternalSwap(&other->field_order_);
  protocol_.Swap(&other->protocol_);
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  domain_.Swap(&other->domain_);
  path_.Swap(&other->path_);
  query_string_.Swap(&other->query_string_);
  fragment_id_.Swap(&other->fragment_id_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(port_, other->port_);
  swap(preserve_order_, other->preserve_order_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Electronic::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Connector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Connector::kTypeFieldNumber;
const int Connector::kMorphosyntacticFeaturesFieldNumber;
const int Connector::kCodeSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Connector::Connector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsConnector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Connector)
}
Connector::Connector(const Connector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Connector)
}

void Connector::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Connector::~Connector() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Connector)
  SharedDtor();
}

void Connector::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Connector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connector::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Connector& Connector::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsConnector();
  return *internal_default_instance();
}

Connector* Connector::New(::google::protobuf::Arena* arena) const {
  Connector* n = new Connector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Connector::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Connector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Connector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Connector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Connector.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Connector.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Connector.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Connector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Connector)
  return false;
#undef DO_
}

void Connector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Connector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->morphosyntactic_features(), output);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code_switch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Connector)
}

::google::protobuf::uint8* Connector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Connector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Connector.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code_switch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Connector)
  return target;
}

size_t Connector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Connector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Connector)
  GOOGLE_DCHECK_NE(&from, this);
  const Connector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Connector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Connector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Connector)
    MergeFrom(*source);
  }
}

void Connector::MergeFrom(const Connector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Connector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
  }
}

void Connector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Connector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connector::CopyFrom(const Connector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Connector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connector::IsInitialized() const {
  return true;
}

void Connector::Swap(Connector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Connector::InternalSwap(Connector* other) {
  using std::swap;
  type_.Swap(&other->type_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Connector::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Abbreviation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Abbreviation::kTextFieldNumber;
const int Abbreviation::kMorphosyntacticFeaturesFieldNumber;
const int Abbreviation::kCodeSwitchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Abbreviation::Abbreviation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsAbbreviation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.sparrowhawk.Abbreviation)
}
Abbreviation::Abbreviation(const Abbreviation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_morphosyntactic_features()) {
    morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
  }
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code_switch()) {
    code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
  }
  // @@protoc_insertion_point(copy_constructor:speech.sparrowhawk.Abbreviation)
}

void Abbreviation::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Abbreviation::~Abbreviation() {
  // @@protoc_insertion_point(destructor:speech.sparrowhawk.Abbreviation)
  SharedDtor();
}

void Abbreviation::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  morphosyntactic_features_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_switch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Abbreviation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Abbreviation::descriptor() {
  ::protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Abbreviation& Abbreviation::default_instance() {
  ::protobuf_semiotic_5fclasses_2eproto::InitDefaultsAbbreviation();
  return *internal_default_instance();
}

Abbreviation* Abbreviation::New(::google::protobuf::Arena* arena) const {
  Abbreviation* n = new Abbreviation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Abbreviation::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.sparrowhawk.Abbreviation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!morphosyntactic_features_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*morphosyntactic_features_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_switch_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_switch_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Abbreviation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.sparrowhawk.Abbreviation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Abbreviation.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string morphosyntactic_features = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_morphosyntactic_features()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Abbreviation.morphosyntactic_features");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code_switch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code_switch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code_switch().data(), static_cast<int>(this->code_switch().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speech.sparrowhawk.Abbreviation.code_switch");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.sparrowhawk.Abbreviation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.sparrowhawk.Abbreviation)
  return false;
#undef DO_
}

void Abbreviation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.sparrowhawk.Abbreviation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.morphosyntactic_features");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->morphosyntactic_features(), output);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.code_switch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->code_switch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech.sparrowhawk.Abbreviation)
}

::google::protobuf::uint8* Abbreviation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.sparrowhawk.Abbreviation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string morphosyntactic_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->morphosyntactic_features().data(), static_cast<int>(this->morphosyntactic_features().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.morphosyntactic_features");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->morphosyntactic_features(), target);
  }

  // optional string code_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code_switch().data(), static_cast<int>(this->code_switch().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speech.sparrowhawk.Abbreviation.code_switch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code_switch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech.sparrowhawk.Abbreviation)
  return target;
}

size_t Abbreviation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech.sparrowhawk.Abbreviation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional string morphosyntactic_features = 2;
    if (has_morphosyntactic_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->morphosyntactic_features());
    }

    // optional string code_switch = 3;
    if (has_code_switch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code_switch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Abbreviation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.sparrowhawk.Abbreviation)
  GOOGLE_DCHECK_NE(&from, this);
  const Abbreviation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Abbreviation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.sparrowhawk.Abbreviation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.sparrowhawk.Abbreviation)
    MergeFrom(*source);
  }
}

void Abbreviation::MergeFrom(const Abbreviation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.sparrowhawk.Abbreviation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_morphosyntactic_features();
      morphosyntactic_features_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.morphosyntactic_features_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code_switch();
      code_switch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_switch_);
    }
  }
}

void Abbreviation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.sparrowhawk.Abbreviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Abbreviation::CopyFrom(const Abbreviation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.sparrowhawk.Abbreviation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abbreviation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Abbreviation::Swap(Abbreviation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Abbreviation::InternalSwap(Abbreviation* other) {
  using std::swap;
  text_.Swap(&other->text_);
  morphosyntactic_features_.Swap(&other->morphosyntactic_features_);
  code_switch_.Swap(&other->code_switch_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Abbreviation::GetMetadata() const {
  protobuf_semiotic_5fclasses_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_semiotic_5fclasses_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)
