// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparrowhawk_configuration.proto

#ifndef PROTOBUF_sparrowhawk_5fconfiguration_2eproto__INCLUDED
#define PROTOBUF_sparrowhawk_5fconfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_sparrowhawk_5fconfiguration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSparrowhawkConfigurationImpl();
void InitDefaultsSparrowhawkConfiguration();
inline void InitDefaults() {
  InitDefaultsSparrowhawkConfiguration();
}
}  // namespace protobuf_sparrowhawk_5fconfiguration_2eproto
namespace speech {
namespace sparrowhawk {
class SparrowhawkConfiguration;
class SparrowhawkConfigurationDefaultTypeInternal;
extern SparrowhawkConfigurationDefaultTypeInternal _SparrowhawkConfiguration_default_instance_;
}  // namespace sparrowhawk
}  // namespace speech
namespace speech {
namespace sparrowhawk {

// ===================================================================

class SparrowhawkConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.sparrowhawk.SparrowhawkConfiguration) */ {
 public:
  SparrowhawkConfiguration();
  virtual ~SparrowhawkConfiguration();

  SparrowhawkConfiguration(const SparrowhawkConfiguration& from);

  inline SparrowhawkConfiguration& operator=(const SparrowhawkConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparrowhawkConfiguration(SparrowhawkConfiguration&& from) noexcept
    : SparrowhawkConfiguration() {
    *this = ::std::move(from);
  }

  inline SparrowhawkConfiguration& operator=(SparrowhawkConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SparrowhawkConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparrowhawkConfiguration* internal_default_instance() {
    return reinterpret_cast<const SparrowhawkConfiguration*>(
               &_SparrowhawkConfiguration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SparrowhawkConfiguration* other);
  friend void swap(SparrowhawkConfiguration& a, SparrowhawkConfiguration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparrowhawkConfiguration* New() const PROTOBUF_FINAL { return New(NULL); }

  SparrowhawkConfiguration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparrowhawkConfiguration& from);
  void MergeFrom(const SparrowhawkConfiguration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparrowhawkConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tokenizer_grammar = 1;
  bool has_tokenizer_grammar() const;
  void clear_tokenizer_grammar();
  static const int kTokenizerGrammarFieldNumber = 1;
  const ::std::string& tokenizer_grammar() const;
  void set_tokenizer_grammar(const ::std::string& value);
  #if LANG_CXX11
  void set_tokenizer_grammar(::std::string&& value);
  #endif
  void set_tokenizer_grammar(const char* value);
  void set_tokenizer_grammar(const char* value, size_t size);
  ::std::string* mutable_tokenizer_grammar();
  ::std::string* release_tokenizer_grammar();
  void set_allocated_tokenizer_grammar(::std::string* tokenizer_grammar);

  // optional string verbalizer_grammar = 2;
  bool has_verbalizer_grammar() const;
  void clear_verbalizer_grammar();
  static const int kVerbalizerGrammarFieldNumber = 2;
  const ::std::string& verbalizer_grammar() const;
  void set_verbalizer_grammar(const ::std::string& value);
  #if LANG_CXX11
  void set_verbalizer_grammar(::std::string&& value);
  #endif
  void set_verbalizer_grammar(const char* value);
  void set_verbalizer_grammar(const char* value, size_t size);
  ::std::string* mutable_verbalizer_grammar();
  ::std::string* release_verbalizer_grammar();
  void set_allocated_verbalizer_grammar(::std::string* verbalizer_grammar);

  // optional string sentence_boundary_regexp = 3;
  bool has_sentence_boundary_regexp() const;
  void clear_sentence_boundary_regexp();
  static const int kSentenceBoundaryRegexpFieldNumber = 3;
  const ::std::string& sentence_boundary_regexp() const;
  void set_sentence_boundary_regexp(const ::std::string& value);
  #if LANG_CXX11
  void set_sentence_boundary_regexp(::std::string&& value);
  #endif
  void set_sentence_boundary_regexp(const char* value);
  void set_sentence_boundary_regexp(const char* value, size_t size);
  ::std::string* mutable_sentence_boundary_regexp();
  ::std::string* release_sentence_boundary_regexp();
  void set_allocated_sentence_boundary_regexp(::std::string* sentence_boundary_regexp);

  // optional string sentence_boundary_exceptions_file = 4;
  bool has_sentence_boundary_exceptions_file() const;
  void clear_sentence_boundary_exceptions_file();
  static const int kSentenceBoundaryExceptionsFileFieldNumber = 4;
  const ::std::string& sentence_boundary_exceptions_file() const;
  void set_sentence_boundary_exceptions_file(const ::std::string& value);
  #if LANG_CXX11
  void set_sentence_boundary_exceptions_file(::std::string&& value);
  #endif
  void set_sentence_boundary_exceptions_file(const char* value);
  void set_sentence_boundary_exceptions_file(const char* value, size_t size);
  ::std::string* mutable_sentence_boundary_exceptions_file();
  ::std::string* release_sentence_boundary_exceptions_file();
  void set_allocated_sentence_boundary_exceptions_file(::std::string* sentence_boundary_exceptions_file);

  // optional string serialization_spec = 5;
  bool has_serialization_spec() const;
  void clear_serialization_spec();
  static const int kSerializationSpecFieldNumber = 5;
  const ::std::string& serialization_spec() const;
  void set_serialization_spec(const ::std::string& value);
  #if LANG_CXX11
  void set_serialization_spec(::std::string&& value);
  #endif
  void set_serialization_spec(const char* value);
  void set_serialization_spec(const char* value, size_t size);
  ::std::string* mutable_serialization_spec();
  ::std::string* release_serialization_spec();
  void set_allocated_serialization_spec(::std::string* serialization_spec);

  // @@protoc_insertion_point(class_scope:speech.sparrowhawk.SparrowhawkConfiguration)
 private:
  void set_has_tokenizer_grammar();
  void clear_has_tokenizer_grammar();
  void set_has_verbalizer_grammar();
  void clear_has_verbalizer_grammar();
  void set_has_sentence_boundary_regexp();
  void clear_has_sentence_boundary_regexp();
  void set_has_sentence_boundary_exceptions_file();
  void clear_has_sentence_boundary_exceptions_file();
  void set_has_serialization_spec();
  void clear_has_serialization_spec();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tokenizer_grammar_;
  ::google::protobuf::internal::ArenaStringPtr verbalizer_grammar_;
  ::google::protobuf::internal::ArenaStringPtr sentence_boundary_regexp_;
  ::google::protobuf::internal::ArenaStringPtr sentence_boundary_exceptions_file_;
  ::google::protobuf::internal::ArenaStringPtr serialization_spec_;
  friend struct ::protobuf_sparrowhawk_5fconfiguration_2eproto::TableStruct;
  friend void ::protobuf_sparrowhawk_5fconfiguration_2eproto::InitDefaultsSparrowhawkConfigurationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SparrowhawkConfiguration

// optional string tokenizer_grammar = 1;
inline bool SparrowhawkConfiguration::has_tokenizer_grammar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparrowhawkConfiguration::set_has_tokenizer_grammar() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SparrowhawkConfiguration::clear_has_tokenizer_grammar() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SparrowhawkConfiguration::clear_tokenizer_grammar() {
  tokenizer_grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tokenizer_grammar();
}
inline const ::std::string& SparrowhawkConfiguration::tokenizer_grammar() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  return tokenizer_grammar_.GetNoArena();
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const ::std::string& value) {
  set_has_tokenizer_grammar();
  tokenizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
#if LANG_CXX11
inline void SparrowhawkConfiguration::set_tokenizer_grammar(::std::string&& value) {
  set_has_tokenizer_grammar();
  tokenizer_grammar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
#endif
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tokenizer_grammar();
  tokenizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline void SparrowhawkConfiguration::set_tokenizer_grammar(const char* value, size_t size) {
  set_has_tokenizer_grammar();
  tokenizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}
inline ::std::string* SparrowhawkConfiguration::mutable_tokenizer_grammar() {
  set_has_tokenizer_grammar();
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  return tokenizer_grammar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparrowhawkConfiguration::release_tokenizer_grammar() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
  clear_has_tokenizer_grammar();
  return tokenizer_grammar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_tokenizer_grammar(::std::string* tokenizer_grammar) {
  if (tokenizer_grammar != NULL) {
    set_has_tokenizer_grammar();
  } else {
    clear_has_tokenizer_grammar();
  }
  tokenizer_grammar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tokenizer_grammar);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.tokenizer_grammar)
}

// optional string verbalizer_grammar = 2;
inline bool SparrowhawkConfiguration::has_verbalizer_grammar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SparrowhawkConfiguration::set_has_verbalizer_grammar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SparrowhawkConfiguration::clear_has_verbalizer_grammar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SparrowhawkConfiguration::clear_verbalizer_grammar() {
  verbalizer_grammar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_verbalizer_grammar();
}
inline const ::std::string& SparrowhawkConfiguration::verbalizer_grammar() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  return verbalizer_grammar_.GetNoArena();
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const ::std::string& value) {
  set_has_verbalizer_grammar();
  verbalizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
#if LANG_CXX11
inline void SparrowhawkConfiguration::set_verbalizer_grammar(::std::string&& value) {
  set_has_verbalizer_grammar();
  verbalizer_grammar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
#endif
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_verbalizer_grammar();
  verbalizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline void SparrowhawkConfiguration::set_verbalizer_grammar(const char* value, size_t size) {
  set_has_verbalizer_grammar();
  verbalizer_grammar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}
inline ::std::string* SparrowhawkConfiguration::mutable_verbalizer_grammar() {
  set_has_verbalizer_grammar();
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  return verbalizer_grammar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparrowhawkConfiguration::release_verbalizer_grammar() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
  clear_has_verbalizer_grammar();
  return verbalizer_grammar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_verbalizer_grammar(::std::string* verbalizer_grammar) {
  if (verbalizer_grammar != NULL) {
    set_has_verbalizer_grammar();
  } else {
    clear_has_verbalizer_grammar();
  }
  verbalizer_grammar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verbalizer_grammar);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.verbalizer_grammar)
}

// optional string sentence_boundary_regexp = 3;
inline bool SparrowhawkConfiguration::has_sentence_boundary_regexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SparrowhawkConfiguration::set_has_sentence_boundary_regexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SparrowhawkConfiguration::clear_has_sentence_boundary_regexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SparrowhawkConfiguration::clear_sentence_boundary_regexp() {
  sentence_boundary_regexp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sentence_boundary_regexp();
}
inline const ::std::string& SparrowhawkConfiguration::sentence_boundary_regexp() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  return sentence_boundary_regexp_.GetNoArena();
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const ::std::string& value) {
  set_has_sentence_boundary_regexp();
  sentence_boundary_regexp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
#if LANG_CXX11
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(::std::string&& value) {
  set_has_sentence_boundary_regexp();
  sentence_boundary_regexp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
#endif
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sentence_boundary_regexp();
  sentence_boundary_regexp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_regexp(const char* value, size_t size) {
  set_has_sentence_boundary_regexp();
  sentence_boundary_regexp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}
inline ::std::string* SparrowhawkConfiguration::mutable_sentence_boundary_regexp() {
  set_has_sentence_boundary_regexp();
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  return sentence_boundary_regexp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparrowhawkConfiguration::release_sentence_boundary_regexp() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
  clear_has_sentence_boundary_regexp();
  return sentence_boundary_regexp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_sentence_boundary_regexp(::std::string* sentence_boundary_regexp) {
  if (sentence_boundary_regexp != NULL) {
    set_has_sentence_boundary_regexp();
  } else {
    clear_has_sentence_boundary_regexp();
  }
  sentence_boundary_regexp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sentence_boundary_regexp);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_regexp)
}

// optional string sentence_boundary_exceptions_file = 4;
inline bool SparrowhawkConfiguration::has_sentence_boundary_exceptions_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SparrowhawkConfiguration::set_has_sentence_boundary_exceptions_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SparrowhawkConfiguration::clear_has_sentence_boundary_exceptions_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SparrowhawkConfiguration::clear_sentence_boundary_exceptions_file() {
  sentence_boundary_exceptions_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sentence_boundary_exceptions_file();
}
inline const ::std::string& SparrowhawkConfiguration::sentence_boundary_exceptions_file() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  return sentence_boundary_exceptions_file_.GetNoArena();
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const ::std::string& value) {
  set_has_sentence_boundary_exceptions_file();
  sentence_boundary_exceptions_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
#if LANG_CXX11
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(::std::string&& value) {
  set_has_sentence_boundary_exceptions_file();
  sentence_boundary_exceptions_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
#endif
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sentence_boundary_exceptions_file();
  sentence_boundary_exceptions_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline void SparrowhawkConfiguration::set_sentence_boundary_exceptions_file(const char* value, size_t size) {
  set_has_sentence_boundary_exceptions_file();
  sentence_boundary_exceptions_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}
inline ::std::string* SparrowhawkConfiguration::mutable_sentence_boundary_exceptions_file() {
  set_has_sentence_boundary_exceptions_file();
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  return sentence_boundary_exceptions_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparrowhawkConfiguration::release_sentence_boundary_exceptions_file() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
  clear_has_sentence_boundary_exceptions_file();
  return sentence_boundary_exceptions_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_sentence_boundary_exceptions_file(::std::string* sentence_boundary_exceptions_file) {
  if (sentence_boundary_exceptions_file != NULL) {
    set_has_sentence_boundary_exceptions_file();
  } else {
    clear_has_sentence_boundary_exceptions_file();
  }
  sentence_boundary_exceptions_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sentence_boundary_exceptions_file);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.sentence_boundary_exceptions_file)
}

// optional string serialization_spec = 5;
inline bool SparrowhawkConfiguration::has_serialization_spec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SparrowhawkConfiguration::set_has_serialization_spec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SparrowhawkConfiguration::clear_has_serialization_spec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SparrowhawkConfiguration::clear_serialization_spec() {
  serialization_spec_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialization_spec();
}
inline const ::std::string& SparrowhawkConfiguration::serialization_spec() const {
  // @@protoc_insertion_point(field_get:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  return serialization_spec_.GetNoArena();
}
inline void SparrowhawkConfiguration::set_serialization_spec(const ::std::string& value) {
  set_has_serialization_spec();
  serialization_spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
#if LANG_CXX11
inline void SparrowhawkConfiguration::set_serialization_spec(::std::string&& value) {
  set_has_serialization_spec();
  serialization_spec_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
#endif
inline void SparrowhawkConfiguration::set_serialization_spec(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialization_spec();
  serialization_spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline void SparrowhawkConfiguration::set_serialization_spec(const char* value, size_t size) {
  set_has_serialization_spec();
  serialization_spec_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}
inline ::std::string* SparrowhawkConfiguration::mutable_serialization_spec() {
  set_has_serialization_spec();
  // @@protoc_insertion_point(field_mutable:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  return serialization_spec_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SparrowhawkConfiguration::release_serialization_spec() {
  // @@protoc_insertion_point(field_release:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
  clear_has_serialization_spec();
  return serialization_spec_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SparrowhawkConfiguration::set_allocated_serialization_spec(::std::string* serialization_spec) {
  if (serialization_spec != NULL) {
    set_has_serialization_spec();
  } else {
    clear_has_serialization_spec();
  }
  serialization_spec_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialization_spec);
  // @@protoc_insertion_point(field_set_allocated:speech.sparrowhawk.SparrowhawkConfiguration.serialization_spec)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sparrowhawk
}  // namespace speech

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sparrowhawk_5fconfiguration_2eproto__INCLUDED
